/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModRRHH;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import principal.FormMain;
import utiles.DBManager;
import utiles.Focus;
import utiles.InfoErrores;
import utiles.MaxLength;
import utiles.StatementManager;
import utiles.TablaDiasHorasTrabajadas;
import views.busca.DlgConsultas;

/**
 *
 * @author Andres
 */
public class CalculoDiasHoras extends javax.swing.JDialog {

    TablaDiasHorasTrabajadas tablaDiasHoras;
    String codEmpresa = utiles.Utiles.getCodEmpresaDefault();
    String codLocal = utiles.Utiles.getCodLocalDefault(codEmpresa);
    String periodo = utiles.Utiles.getPeriodoRRHH(codEmpresa, codLocal);
    
    public CalculoDiasHoras(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        jTFCodEmpleado.grabFocus();         
        jTFCodEmpleado.setDocument(new MaxLength(6, "", "ENTERO"));
        jTFCodEmpleado.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTFCodEmpleado.addFocusListener(new Focus());
        jTFCodEmpleado.setText("0");
        limpiarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTFCodEmpleado = new javax.swing.JTextField();
        jTFNombreEmpleado = new javax.swing.JTextField();
        jBProcesar = new javax.swing.JButton();
        jBMarcarTodos = new javax.swing.JButton();
        jBDesmarcarTodos = new javax.swing.JButton();
        jLEstado = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDiasHorasTrabajadas = new javax.swing.JTable();
        jBConfirmar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ATOMSystems|Main - Cálculo Días y Horas Trabajadas");

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jPanel5.setBackground(new java.awt.Color(204, 255, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("CALCULO DIAS Y HORAS TRABAJADAS");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Empleados:");

        jTFCodEmpleado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFCodEmpleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFCodEmpleadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFCodEmpleadoFocusLost(evt);
            }
        });
        jTFCodEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFCodEmpleadoKeyPressed(evt);
            }
        });

        jTFNombreEmpleado.setEditable(false);
        jTFNombreEmpleado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jBProcesar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/procesar32.png"))); // NOI18N
        jBProcesar.setMnemonic('P');
        jBProcesar.setText("Procesar");
        jBProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProcesarActionPerformed(evt);
            }
        });

        jBMarcarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/marcar_todos32.png"))); // NOI18N
        jBMarcarTodos.setMnemonic('M');
        jBMarcarTodos.setText("Marcar Todos");
        jBMarcarTodos.setEnabled(false);
        jBMarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMarcarTodosActionPerformed(evt);
            }
        });

        jBDesmarcarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/desmarcar_todos32.png"))); // NOI18N
        jBDesmarcarTodos.setMnemonic('D');
        jBDesmarcarTodos.setText("Desmarcar Todos");
        jBDesmarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDesmarcarTodosActionPerformed(evt);
            }
        });

        jLEstado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTFCodEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBProcesar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBMarcarTodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBDesmarcarTodos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBProcesar)
                            .addComponent(jBMarcarTodos)
                            .addComponent(jBDesmarcarTodos))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTFCodEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5))))
        );

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jTDiasHorasTrabajadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTDiasHorasTrabajadas);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/check24.png"))); // NOI18N
        jBConfirmar.setMnemonic('C');
        jBConfirmar.setText("Confirmar");
        jBConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConfirmarActionPerformed(evt);
            }
        });

        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cancelar24.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBCancelar)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBCancelar, jBConfirmar});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBCancelar))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(959, 591));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTFCodEmpleadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCodEmpleadoKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            
            jBProcesar.grabFocus();
        }
        
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            try {
                DlgConsultas empleados = new DlgConsultas(new JFrame(), true);
                empleados.pack();
                empleados.setTitle("ATOMSystems|Main - Consulta de Empleados");
                empleados.dConsultas("empleado", "nombre", "cod_empleado", "nombre", "apellido", "fec_ingreso", "Codigo", "Nombre", "Apellido", "Ingreso");
                empleados.setText(jTFCodEmpleado);
                empleados.tfDescripcionBusqueda.setText("%");
                empleados.tfDescripcionBusqueda.selectAll();
                empleados.setVisible(true);
            } catch (Exception ex) {
                ex.printStackTrace();
                InfoErrores.errores(ex);
                JOptionPane.showMessageDialog(this, "No se pudo crear el Formulario de Consulta!", "ATENCION", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTFCodEmpleadoKeyPressed

    private void jTFCodEmpleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodEmpleadoFocusGained
        jTFCodEmpleado.selectAll();
    }//GEN-LAST:event_jTFCodEmpleadoFocusGained

    private void jTFCodEmpleadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodEmpleadoFocusLost
        jTFNombreEmpleado.setText(getEmpleado(jTFCodEmpleado.getText()));
    }//GEN-LAST:event_jTFCodEmpleadoFocusLost

    private void jBProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProcesarActionPerformed
        Object[] options = {"Si", "No"};
        int inputValue = JOptionPane.showOptionDialog(null, "Atención: \n Realmente desea procesar CALCULO de DIAS y HORAS trabajadas?", "Atención",
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(inputValue == 0){
            jLEstado.setVisible(true);
            jLEstado.setText("Aguarde, procesando ...");            
            String fechaIniPeriodo = utiles.Utiles.getFecInicalPeriodoRRHH(codEmpresa, codLocal);
            String fechaFinPeriodo = utiles.Utiles.getFecFinalPeriodoRRHH(codEmpresa, codLocal);            
            String diasLaborales = utiles.Utiles.getDiasLaboralesRRHH(codEmpresa, codLocal);
            if (jTFCodEmpleado.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Debe informar un empleado!", "Atención", JOptionPane.WARNING_MESSAGE);
                jTFCodEmpleado.grabFocus();
                return;
            }
            
            if(true){
                jBProcesar.setEnabled(false);
                limpiarDiaHoraAux();
                if(ejecutarCalculoDiasHoras(fechaIniPeriodo, fechaFinPeriodo, codEmpresa, codLocal, periodo, diasLaborales, jTFCodEmpleado.getText())){
                    jLEstado.setText("Proceso finalizado ...");
                    JOptionPane.showMessageDialog(this, "Proceso finalizado con éxito !!!", "Suceso...", JOptionPane.INFORMATION_MESSAGE);
                    cargaDatos(codEmpresa, codLocal);
                }else{
                    jLEstado.setText("Error calculando días/horas trabajadas ...");
                }
            }else{
                JOptionPane.showMessageDialog(this, "ATENCION: \n Primero se deben confirmar TODAS las MARCACIONES! \n Operación Cancelada...", "Error", JOptionPane.WARNING_MESSAGE);
                dispose();
            }
        }else{
            this.dispose();
        }
    }//GEN-LAST:event_jBProcesarActionPerformed

    private void jBMarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMarcarTodosActionPerformed
        jBMarcarTodos.setEnabled(false);
        jBDesmarcarTodos.setEnabled(true);
        for (int i = 0; i < jTDiasHorasTrabajadas.getRowCount(); i++) {
            jTDiasHorasTrabajadas.setValueAt(true, i, 7);
        }
    }//GEN-LAST:event_jBMarcarTodosActionPerformed

    private void jBDesmarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDesmarcarTodosActionPerformed
        jBMarcarTodos.setEnabled(true);
        jBDesmarcarTodos.setEnabled(false);
        for (int i = 0; i < jTDiasHorasTrabajadas.getRowCount(); i++) {
            jTDiasHorasTrabajadas.setValueAt(false, i, 7);
        }
    }//GEN-LAST:event_jBDesmarcarTodosActionPerformed

    private void jBConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConfirmarActionPerformed
        boolean result;
        
        if(tablaDiasHoras.getRowCount() <= 0){
            JOptionPane.showMessageDialog(this, "Procese datos!", "Msg.", JOptionPane.WARNING_MESSAGE);
            System.out.println("DIMENSION DE LA TABLA: " + tablaDiasHoras.getRowCount());
        }else{
            jLEstado.setText("Aguarde, procesando ...");
            try{
                limpiarDiaHora(Integer.parseInt(periodo));
                result = grabaDatos();
                if(result){
                    DBManager.conn.commit();
                    jLEstado.setText("Proceso Finalizado...");
                    JOptionPane.showMessageDialog(this, "Proceso finalizado con éxito !!!", "Msg.", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                }else{
                    DBManager.conn.rollback();
                    JOptionPane.showMessageDialog(this, "ATENCION: \n Error Procesando Datos \n Proceso Cancelado !!!", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }catch(Exception ex){
                ex.printStackTrace();
                InfoErrores.errores(ex);
            }
        }
        
        
        
    }//GEN-LAST:event_jBConfirmarActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        setComponentesCancelar();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void limpiarDatos() {         
        tablaDiasHoras = new TablaDiasHorasTrabajadas(null);
        jTDiasHorasTrabajadas.setModel(tablaDiasHoras);        
        configColumnas();
    }
    
    private void configColumnas() {
        jTDiasHorasTrabajadas.getColumnModel().getColumn(0).setPreferredWidth(20);
        jTDiasHorasTrabajadas.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTDiasHorasTrabajadas.getColumnModel().getColumn(2).setPreferredWidth(30);
        jTDiasHorasTrabajadas.getColumnModel().getColumn(3).setPreferredWidth(50);
        jTDiasHorasTrabajadas.getColumnModel().getColumn(4).setPreferredWidth(60);
        jTDiasHorasTrabajadas.getColumnModel().getColumn(5).setPreferredWidth(60);
        jTDiasHorasTrabajadas.getColumnModel().getColumn(6).setPreferredWidth(50);
        jTDiasHorasTrabajadas.getColumnModel().getColumn(7).setPreferredWidth(15);
    }
    
    private String getEmpleado(String codEmpleado){
        String result = "";
        if(utiles.Utiles.isLongValid(codEmpleado)){
            if(Long.valueOf(codEmpleado) == 0){
                result = "TODOS";
            }else{
                StatementManager sm = new StatementManager();
                try{
                    sm.TheSql = "SELECT (apellido || ', ' || nombre) AS nombre " +
                                "FROM empleado " +
                                "WHERE cod_empleado = " + codEmpleado + 
                                " AND activo = 'S'";
                    sm.EjecutarSql();
                    if(sm.TheResultSet.next()){
                        result = sm.TheResultSet.getString("nombre");
                    }else{
                        result = "NO DISPONIBLE, VERIFIQUE REGISTRO!";
                    }
                }catch(Exception ex){
                    ex.printStackTrace();
                }finally{
                    sm.CerrarResultSet();
                    sm = null;
                }
            }
        }
        return result;
    }
    
    private boolean ejecutarCalculoDiasHoras(String fecInicial, String fecFinal, String codEmpresa, String codLocal, 
                                             String periodo, String diasLaborales, String codEmpleado){
        boolean result = true;
        String sqlConsultaDiasHoras = "";
        
        if(jTFCodEmpleado.getText().equals("0")){
            
        }
        
        try{
            StatementManager sm = new StatementManager();
            sm.TheSql = "SELECT h.cod_empresa, h.cod_local, e.cod_empleado, e.hora_extra,"                       
                        + " '" + periodo + "' AS periodo,  '" + diasLaborales + "' AS dias_laborales, "
                        +" EXTRACT (EPOCH FROM   SUM("

                        + "   (case when entrada1 > salida1 then (((case when entrada1 is null then now() else entrada1 end) - ('24:00:00')::time) -  "
                        + "   (case when salida1 is null then now() else salida1 end)) * (-1) else"
                        + "   "
                        + "   (case when salida1 is null then now() else salida1 end)- (case when entrada1 is null then now() else entrada1 end)end) +  "
                        
                        + "   (case when entrada2 > salida2 then (((case when entrada2 is null then now() else entrada2 end) - ('24:00:00')::time) -  "
                        + "   (case when salida2 is null then now() else salida2 end)) * (-1) else "
                        + "   (case when salida2 is null then now() else salida2 end)-(case when entrada2 is null then now() else entrada2 end)end) +  "
                     
                        + "   (case when entrada3 > salida3 then (((case when entrada3 is null then now() else entrada3 end) - ('24:00:00')::time) -  "
                        + "   (case when salida3 is null then now() else salida3 end)) * (-1) else "
                        + "   (case when salida3 is null then now() else salida3 end)-(case when entrada3 is null then now() else entrada3 end)end) +  "
                      
                        + "   (case when entrada4 > salida4 then (((case when entrada4 is null then now() else entrada4 end) - ('24:00:00')::time) -  "
                        + "   (case when salida4 is null then now() else salida4 end)) * (-1) else "
                        + "   (case when salida4 is null then now() else salida4 end)-(case when entrada4 is null then now() else entrada4 end)end)))/60/60 AS horas_trab_nro,  "
                        + "                      SUM(  (case when entrada1 > salida1 then (((case when entrada1 is null then now() else entrada1 end) - ('24:00:00')::time) -  "
                        + "   (case when salida1 is null then now() else salida1 end)) * (-1) else"
                        + "   (case when salida1 is null then now() else salida1 end)- (case when entrada1 is null then now() else entrada1 end)end) +  "
                       
                        + "   (case when entrada2 > salida2 then (((case when entrada2 is null then now() else entrada2 end) - ('24:00:00')::time) -  "
                        + "   (case when salida2 is null then now() else salida2 end)) * (-1) else "
                        + "   (case when salida2 is null then now() else salida2 end)-(case when entrada2 is null then now() else entrada2 end)end) +  "
                       
                        + "   (case when entrada3 > salida3 then (((case when entrada3 is null then now() else entrada3 end) - ('24:00:00')::time) -  "
                        + "   (case when salida3 is null then now() else salida3 end)) * (-1) else "
                        + "   (case when salida3 is null then now() else salida3 end)-(case when entrada3 is null then now() else entrada3 end)end) +  "
                       
                        + "   (case when entrada4 > salida4 then (((case when entrada4 is null then now() else entrada4 end) - ('24:00:00')::time) -  "
                        + "   (case when salida4 is null then now() else salida4 end)) * (-1) else "
                        + "   (case when salida4 is null then now() else salida4 end)-(case when entrada4 is null then now() else entrada4 end)end)  ) AS horas_trab_time,  "
                       
                        + " CASE WHEN (EXTRACT (EPOCH FROM   SUM(  (case when entrada1 > salida1 then (((case when entrada1 is null then now() else entrada1 end) - ('24:00:00')::time) -  "
                        + "   (case when salida1 is null then now() else salida1 end)) * (-1) else"
                        + "   (case when salida1 is null then now() else salida1 end)- (case when entrada1 is null then now() else entrada1 end)end) +  "
                        
                        + "   (case when entrada2 > salida2 then (((case when entrada2 is null then now() else entrada2 end) - ('24:00:00')::time) -  "
                        + "   (case when salida2 is null then now() else salida2 end)) * (-1) else "
                        + "   (case when salida2 is null then now() else salida2 end)-(case when entrada2 is null then now() else entrada2 end)end) +  "
                        
                        + "   (case when entrada3 > salida3 then (((case when entrada3 is null then now() else entrada3 end) - ('24:00:00')::time) -  "
                        + "   (case when salida3 is null then now() else salida3 end)) * (-1) else "
                        + "   (case when salida3 is null then now() else salida3 end)-(case when entrada3 is null then now() else entrada3 end)end) +  "
                        + "  "
                        + "   (case when entrada4 > salida4 then (((case when entrada4 is null then now() else entrada4 end) - ('24:00:00')::time) -  "
                        + "   (case when salida4 is null then now() else salida4 end)) * (-1) else "
                        + "   (case when salida4 is null then now() else salida4 end)-(case when entrada4 is null then now() else entrada4 end)end)  ))/60/60) > " + FormMain.horasIPSMes +" "
                       
                        + "  THEN   ((EXTRACT (EPOCH FROM   SUM(  (case when entrada1 > salida1 then (((case when entrada1 is null then now() else entrada1 end) - ('24:00:00')::time) -  "
                        + "   (case when salida1 is null then now() else salida1 end)) * (-1) else"
                        + "   (case when salida1 is null then now() else salida1 end)- (case when entrada1 is null then now() else entrada1 end)end) +  "
                        
                        + "   (case when entrada2 > salida2 then (((case when entrada2 is null then now() else entrada2 end) - ('24:00:00')::time) -  "
                        + "   (case when salida2 is null then now() else salida2 end)) * (-1) else "
                        + "   (case when salida2 is null then now() else salida2 end)-(case when entrada2 is null then now() else entrada2 end)end) +  "
                       
                        + "   (case when entrada3 > salida3 then (((case when entrada3 is null then now() else entrada3 end) - ('24:00:00')::time) -  "
                        + "   (case when salida3 is null then now() else salida3 end)) * (-1) else "
                        + "   (case when salida3 is null then now() else salida3 end)-(case when entrada3 is null then now() else entrada3 end)end) +  "
                       
                        + "   (case when entrada4 > salida4 then (((case when entrada4 is null then now() else entrada4 end) - ('24:00:00')::time) -  "
                        + "   (case when salida4 is null then now() else salida4 end)) * (-1) else "
                        + "   (case when salida4 is null then now() else salida4 end)-(case when entrada4 is null then now() else entrada4 end)end)  ))/60/60) - " + FormMain.horasIPSMes +") ELSE 0 END AS horas_extras_nro,  "
                        
                        + " (CASE WHEN (EXTRACT (EPOCH FROM   SUM(  (case when entrada1 > salida1 then (((case when entrada1 is null then now() else entrada1 end) - ('24:00:00')::time) -  "
                        + "   (case when salida1 is null then now() else salida1 end)) * (-1) else"
                        + "   (case when salida1 is null then now() else salida1 end)- (case when entrada1 is null then now() else entrada1 end)end) +  "
                        
                        + "   (case when entrada2 > salida2 then (((case when entrada2 is null then now() else entrada2 end) - ('24:00:00')::time) -  "
                        + "   (case when salida2 is null then now() else salida2 end)) * (-1) else "
                        + "   (case when salida2 is null then now() else salida2 end)-(case when entrada2 is null then now() else entrada2 end)end) +  "
                        
                        + "   (case when entrada3 > salida3 then (((case when entrada3 is null then now() else entrada3 end) - ('24:00:00')::time) -  "
                        + "   (case when salida3 is null then now() else salida3 end)) * (-1) else "
                        + "   (case when salida3 is null then now() else salida3 end)-(case when entrada3 is null then now() else entrada3 end)end) +  "
                        
                        + "   (case when entrada4 > salida4 then (((case when entrada4 is null then now() else entrada4 end) - ('24:00:00')::time) -  "
                        + "   (case when salida4 is null then now() else salida4 end)) * (-1) else "
                        + "   (case when salida4 is null then now() else salida4 end)-(case when entrada4 is null then now() else entrada4 end)end)  ))/60/60) > " + FormMain.horasIPSMes +" "
                                                                
                        + "   THEN   ((EXTRACT (EPOCH FROM   SUM(  (case when entrada1 > salida1 then (((case when entrada1 is null then now() else entrada1 end) - ('24:00:00')::time) -  "
                        + "   (case when salida1 is null then now() else salida1 end)) * (-1) else"
                        + "   (case when salida1 is null then now() else salida1 end)- (case when entrada1 is null then now() else entrada1 end)end) +  "
                       
                        + "   (case when entrada2 > salida2 then (((case when entrada2 is null then now() else entrada2 end) - ('24:00:00')::time) -  "
                        + "   (case when salida2 is null then now() else salida2 end)) * (-1) else "
                        + "   (case when salida2 is null then now() else salida2 end)-(case when entrada2 is null then now() else entrada2 end)end) +  "
                       
                        + "   (case when entrada3 > salida3 then (((case when entrada3 is null then now() else entrada3 end) - ('24:00:00')::time) -  "
                        + "   (case when salida3 is null then now() else salida3 end)) * (-1) else "
                        + "   (case when salida3 is null then now() else salida3 end)-(case when entrada3 is null then now() else entrada3 end)end) +  "
                      
                        + "   (case when entrada4 > salida4 then (((case when entrada4 is null then now() else entrada4 end) - ('24:00:00')::time) -  "
                        + "   (case when salida4 is null then now() else salida4 end)) * (-1) else "
                        + "   (case when salida4 is null then now() else salida4 end)-(case when entrada4 is null then now() else entrada4 end)end)  ))/60/60) - " + FormMain.horasIPSMes +")"
                        + "               ELSE 0 END) * interval '1 hour' AS horas_extras_time"
                       
                        + " FROM marcaciones h "
                        + " INNER JOIN empleado e ON h.cod_empleado = e.cod_empleado "
                        + "   AND e.activo = 'S' "
                        + " WHERE h.cod_empresa = '" + codEmpresa +"'"
                        + "   AND h.cod_local = '" + codLocal +"'"
                        + "   AND ((h.fecha) between to_date('" + fecInicial + "', 'dd/mm/yyyy') AND to_date(' " + fecFinal + " ', 'dd/mm/yyyy')) "
                        + "   AND h.estado = 'V' "
                        + "   AND h.situacion = 'C' "
                        + " GROUP BY h.cod_empresa, h.cod_local, e.cod_empleado, e.hora_extra "
                        + " ORDER BY h.cod_empresa, h.cod_local,e.cod_empleado;";
            
            System.out.println("SQL PROCESO:" + sm.TheSql);
            sm.EjecutarSql();
            while(sm.TheResultSet.next() && result){
                long cod_empleado = sm.TheResultSet.getLong("cod_empleado");
                int dias_trabajados = getDiasTrabajados(cod_empleado, fecInicial, fecFinal, codEmpresa, codLocal);
                String horasExtrasNro = "0";
                String horasExtrasTxt = "00:00:00";
                if(sm.TheResultSet.getString("hora_extra").equals("S")){
                    System.out.println("TIENE HORAS EXTRAS: 'S' ");
                    horasExtrasNro = sm.TheResultSet.getString("horas_extras_nro");
                    horasExtrasTxt = sm.TheResultSet.getString("horas_extras_time");
                }
                String sql = "INSERT INTO dia_hora_aux (cod_empresa, cod_local, cod_empleado, periodo, dias_laborales, dias_trabajados, "
                           + "horas_trabajadas, horas_trabajadas_hora, horas_extras, horas_extras_hora) "
                           + "VALUES (" + codEmpresa + ", " + codLocal + ", " + cod_empleado + ", " + periodo + ", " + diasLaborales + ", " + dias_trabajados
                           + ", " + sm.TheResultSet.getString("horas_trab_nro") + ", '" + sm.TheResultSet.getString("horas_trab_time") + "', " + horasExtrasNro + ", '"
                           + horasExtrasTxt +"')";
                System.out.println("SQL INSERT dia_hora_aux: " + sql);
                if(DBManager.ejecutarDML(sql) == 0){
                    result = false;
                }else{
                    try{
                        DBManager.conn.commit();
                        result = true;
                    }catch(Exception ex){
                        DBManager.conn.rollback();
                        result = false;
                    }
                }
            }
        }catch(Exception ex){
            result = false;
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }
        return result;
    }
    
    private int getDiasTrabajados(long codEmpleado, String fechaInicial, String fechaFinal, String codEmpresa, String codLocal){
        int result = 0;
        StatementManager sm = new StatementManager();
        try{
            sm.TheSql = "SELECT count(*) AS dias_trabajados "
                      + "FROM marcaciones s " // use table = marcaciones
                      + "WHERE s.cod_empresa = '" + codEmpresa + "' "
                      + "AND s.cod_local = '" + codLocal + "' "
                      + "AND s.cod_empleado = " + codEmpleado
                      + " AND (s.fecha) between to_date('" + fechaInicial + "', 'dd/mm/yyyy') AND to_date(' " + fechaFinal + " ', 'dd/mm/yyyy') "
                      + "AND s.estado = 'V'  "
                      + "AND s.situacion = 'C'";
            sm.EjecutarSql();
            if(sm.TheResultSet.next()){
                result = sm.TheResultSet.getInt(1);
                if(result > 0 && result < 8){
                    result++;
                }else{
                    if(result >= 8 && result < 16){
                        result =+ 2;
                    }else{
                        if(result >= 16 && result < 20){
                            result =+ 3;
                        }else{
                            if(result >= 20 && result < 24){
                                result =+ 4;
                            }else{
                                if(result > 24){
                                    result = 30;
                                }
                            }
                        }
                    }
                }
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }finally{
            sm.CerrarResultSet();
            sm = null;
        }
        return result;
    }
    
    private void cargaDatos(String codEmpresa, String codLocal){
        String sql = "SELECT dh.cod_empleado, (apellido ||', '|| nombre) AS empleado, dh.periodo, dh.dias_laborales, dias_trabajados, "
                   + " dh.horas_trabajadas_hora AS horas_trabajadas, dh.horas_extras_hora AS horas_extras, "
                   + " 0 AS dias_ingreso "
                   + " FROM dia_hora_aux dh"
                   + " INNER JOIN empleado e ON dh.cod_empleado = e.cod_empleado "
                   + "   AND e.activo = 'S' "
                   + " WHERE dh.cod_empresa = " + codEmpresa
                   + "   AND dh.cod_local   = " + codLocal
                   + " ORDER BY e.cod_seccion, e.cod_empleado";
        ResultSet buscaDiasHoras = DBManager.ejecutarDSL(sql);
        if(buscaDiasHoras != null){
            tablaDiasHoras = new TablaDiasHorasTrabajadas(buscaDiasHoras);
            jTDiasHorasTrabajadas.setModel(tablaDiasHoras);
            configColumnas();            
        }else{
            JOptionPane.showMessageDialog(this, "ATENCION: \n Marcaciones no Registradas o sin confirmar \n Favor verificar MARCACIONES !!!", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private boolean limpiarDiaHoraAux() {
        boolean result = false;
        try {
            String sql = "DELETE FROM dia_hora_aux";
            DBManager.ejecutarDML(sql);
            result = true;
        } catch (Exception ex) {
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }
        return result;
    }
    
    private boolean limpiarDiaHora(int periodo) {
        boolean result = false;
        try {
            String sql = "DELETE FROM dia_hora WHERE periodo = " + periodo;
            DBManager.ejecutarDML(sql);
            result = true;
        } catch (Exception ex) {
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }
        return result;
    }
    
    private boolean grabaDatos(){
        boolean result = false;
        try{
            String sql = "INSERT INTO dia_hora " +
                         "SELECT cod_empresa, cod_local, cod_empleado, periodo, dias_laborales, dias_trabajados, horas_trabajadas, horas_extras, 'V' AS estado, " +
                         FormMain.codUsuario + " AS cod_usuario, now() AS fec_vigencia, horas_trabajadas_hora, horas_extras_hora " +
                         "FROM dia_hora_aux";
            if(DBManager.ejecutarDML(sql) > 0){
                result = true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }
        return result;
    }
    
    
    private void setComponentesCancelar(){
        limpiarDatos();
        jTFCodEmpleado.grabFocus();
        jTFCodEmpleado.setText("0");
        jBProcesar.setEnabled(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculoDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculoDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculoDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculoDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CalculoDiasHoras dialog = new CalculoDiasHoras(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBConfirmar;
    private javax.swing.JButton jBDesmarcarTodos;
    private javax.swing.JButton jBMarcarTodos;
    private javax.swing.JButton jBProcesar;
    private javax.swing.JLabel jLEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTDiasHorasTrabajadas;
    private javax.swing.JTextField jTFCodEmpleado;
    private javax.swing.JTextField jTFNombreEmpleado;
    // End of variables declaration//GEN-END:variables
    
    

}
