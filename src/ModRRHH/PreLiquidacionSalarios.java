/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModRRHH;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import principal.FormMain;
import utiles.DBManager;
import utiles.Focus;
import utiles.InfoErrores;
import utiles.StatementManager;

/**
 *
 * @author Andres
 */
public class PreLiquidacionSalarios extends javax.swing.JDialog {

    /**
     * Creates new form PreLiquidacionSalarios
     */
    
    private Thread hilo;
    private Object objeto = new Object();
    private boolean indice = false;
    private String codEmpresa = ""; 
    private String codLocal = "";
    private String idPeriodo = "";
    private String periodo = "";
    
    public PreLiquidacionSalarios(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        codEmpresa = utiles.Utiles.getCodEmpresaDefault();
        codLocal = utiles.Utiles.getCodLocalDefault(codEmpresa);
        jTFIdPeriodo.setText(utiles.Utiles.getIDPeriodoRRHH());
        idPeriodo = utiles.Utiles.getIDPeriodoRRHH();
        periodo = utiles.Utiles.getPeriodoRRHH(codEmpresa, codLocal);
        
        jTFIdPeriodo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTFIdPeriodo.addFocusListener(new Focus());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTFIdPeriodo = new javax.swing.JTextField();
        jTFPeriodo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTFFecInicioPeriodo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTFFecFinPeriodo = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jProgressBar1 = new javax.swing.JProgressBar();
        jBProcesarPreLiquidacion = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();
        jLProceso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ATOMSystems|Main - Proceso de Pre Liquidación de Salarios");

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jPanel5.setBackground(new java.awt.Color(204, 255, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("PRE LIQUIDACION DE SALARIOS");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Periodo:");

        jTFIdPeriodo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFIdPeriodo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTFIdPeriodo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFIdPeriodoKeyPressed(evt);
            }
        });

        jTFPeriodo.setEditable(false);
        jTFPeriodo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFPeriodo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Desde:");

        jTFFecInicioPeriodo.setEditable(false);
        jTFFecInicioPeriodo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFFecInicioPeriodo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Hasta:");

        jTFFecFinPeriodo.setEditable(false);
        jTFFecFinPeriodo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFFecFinPeriodo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jBProcesarPreLiquidacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/pre_liquidacion24.png"))); // NOI18N
        jBProcesarPreLiquidacion.setText("Procesar Pre Liquidación");
        jBProcesarPreLiquidacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProcesarPreLiquidacionActionPerformed(evt);
            }
        });

        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/salir24.png"))); // NOI18N
        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jLProceso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLProceso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLProceso.setText("*");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jTFIdPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTFPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jTFFecInicioPeriodo)
                                            .addComponent(jTFFecFinPeriodo))))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBProcesarPreLiquidacion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBSalir))
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFIdPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTFFecInicioPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTFFecFinPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLProceso)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBProcesarPreLiquidacion)
                    .addComponent(jBSalir))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(645, 357));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jTFIdPeriodoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFIdPeriodoKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(getPeriodoRRHH(idPeriodo, codEmpresa, codLocal)){
                jBProcesarPreLiquidacion.grabFocus();

            }else{
                JOptionPane.showMessageDialog(this, "ATENCION: Periodo RRHH NO VALIDO!!!", "Msg.", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTFIdPeriodoKeyPressed

    private void jBProcesarPreLiquidacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProcesarPreLiquidacionActionPerformed
        if(jTFPeriodo.getText().equals("")){
            getPeriodoRRHH(idPeriodo, codEmpresa, codLocal);
            procesarPreLiquidacion();
        }else{
            procesarPreLiquidacion();
        }
        
    }//GEN-LAST:event_jBProcesarPreLiquidacionActionPerformed

    private boolean getPeriodoRRHH(String idPeriodo, String codEmpresa, String codLocal){
        boolean result = false;
        jTFPeriodo.setText("");
        jTFFecInicioPeriodo.setText("");
        jTFFecFinPeriodo.setText("");
        if(utiles.Utiles.isNumeric(idPeriodo)){
            StatementManager sm = new StatementManager();
            try{
                sm.TheSql = "SELECT idperiodo, periodo, "
                        + " to_char(fechaInicial,'DD/MM/YYYY') AS fechaInicial, "
                        + " to_char(fechafinal,'DD/MM/YYYY') AS fechafinal "
                        + " FROM PERIODO_RRHH "
                        + " WHERE idperiodo = " + idPeriodo
                        + "   AND cod_empresa = " + codEmpresa
                        + "   AND cod_local = " + codLocal;
                sm.EjecutarSql();
                if (sm.TheResultSet.next()) {
                    String periodo = sm.TheResultSet.getString("periodo");
                    jTFPeriodo.setText(periodo.substring(0,2) + "/" + periodo.substring(2,6));
                    jTFFecInicioPeriodo.setText(sm.TheResultSet.getString("fechaInicial"));
                    jTFFecFinPeriodo.setText(sm.TheResultSet.getString("fechaFinal"));
                    result = true;
                }
            }catch(Exception ex){
                ex.printStackTrace();
                InfoErrores.errores(ex);
            }finally{
                sm.CerrarResultSet();
                sm = null;
            }
        }
        return result;
    }
    
    private void procesarPreLiquidacion(){
        Object[] options = {"Si", "No"};
        int inputValue = JOptionPane.showOptionDialog(null, "¿Realmente desea procesar la Pre-Liquidación?", "Atención", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(inputValue == 0){
            jBProcesarPreLiquidacion.setEnabled(false);
            jBSalir.setEnabled(false);
            if(salariosHorasExtrasConfirmadas()){
                if(diasHorasConfirmadas()){
                    hilo = new threadBarUpdate();
                    indice = false;
                    hilo.start();
                }else{
                    JOptionPane.showMessageDialog(this, "ATENCION: \n Primero se deben confirmar DIAS & HORAS trabajados! \n Operación Cancelada...", "Error", JOptionPane.WARNING_MESSAGE);
                    dispose();
                }
            }else{
                JOptionPane.showMessageDialog(this, "ATENCION: \n Primero se deben confirmar nuevos SALARIOS y HORAS Extras habilitadas! \n Operación Cancelada...", "Error", JOptionPane.WARNING_MESSAGE);
                dispose();
            }
        }else{
            this.dispose();
        }
    }
    
    private boolean salariosHorasExtrasConfirmadas(){
        boolean result = false;
        StatementManager sm = new StatementManager();
        try{
            String empleados = "";
            sm.TheSql = "SELECT e.cod_empleado, apellido || ', ' || nombre AS nombre "
                      + " FROM empleado e "
                      + " WHERE e.cod_local = " + codLocal
                      + "   AND e.activo = 'S' "
                      + "   AND e.salario_confirmado = 'N' "
                      + " ORDER BY e.cod_empleado";
            sm.EjecutarSql();
            while (sm.TheResultSet.next()) {
                empleados += " \n " + sm.TheResultSet.getString("cod_empleado") + " - " + sm.TheResultSet.getString("nombre");
            }
            if (empleados.length() > 0) {
                JOptionPane.showMessageDialog(this, "ATENCION: \n Empleados con datos relevantes modificados pendientes de confirmacion: \n " + empleados);
            } else {
                result = true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }finally{
            sm.CerrarStatement();
            sm = null;
        }
        return result;
    }
    
    private boolean diasHorasConfirmadas(){
        boolean result = false;
        StatementManager sm = new StatementManager();
        try {
            String diaHora = "";
            sm.TheSql = "SELECT e.cod_empleado, apellido || ', ' || nombre AS nombre "
                    + "  FROM dia_hora dh "
                    + "  INNER JOIN empleado e ON dh.cod_empleado = e.cod_empleado "
                    + "  AND e.activo = 'S' "
                    + "  WHERE dh.cod_empresa= " + codEmpresa
                    + "  AND dh.cod_local  = " + codLocal
                    + "  AND dh.estado     = 'V' "
                    + "  AND dh.situacion != 'C' "
                    + "  AND dh.periodo    = " + periodo
                    + "  ORDER BY e.cod_empleado";
            sm.EjecutarSql();
            while (sm.TheResultSet.next()) {
                diaHora += " \n " + sm.TheResultSet.getString("cod_empleado") + " - " + sm.TheResultSet.getString("nombre");
            }
            if (diaHora.length() > 0) {
                JOptionPane.showMessageDialog(this, "ATENCION: \n DIAS & HORAS sin confirmar " + diaHora);
            } else {
                result = true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            InfoErrores.errores(ex);
        } finally {
            sm.CerrarStatement();
            sm = null;
        }
        return result;
    }
    
    class threadBarUpdate extends Thread{
        public void run(){
            jLProceso.setText("Favor Aguarde: << Procesando Pre-Liquidacion >>");
            String vPeriodo = jTFPeriodo.getText();
            String vFecIni = utiles.Utiles.getFecInicalPeriodoRRHH(codEmpresa, codLocal);
            String vFecFin = utiles.Utiles.getFecFinalPeriodoRRHH(codEmpresa, codLocal);
            JOptionPane.showMessageDialog(null, "Periodo: " + periodo + "  Desde: " + vFecIni + " Hasta: " + vFecFin, "Msg.", JOptionPane.INFORMATION_MESSAGE);
            if(limpiarPreLiquidacioPeriodo(periodo)){
                String sql = "SELECT dce.cod_empleado, dce.cod_concepto, dce.debcre, dce.monto, "
                           + " coalesce(dce.observacion,' ') AS observacion, e.cod_seccion, sec.cod_centrocosto, dce.can_cuota "
                           + " FROM debcre_empleado dce, empleado e, seccion sec "
                           + " WHERE dce.cod_empresa = " + codEmpresa
                           + "   AND dce.cod_local = " + codLocal
                           + "   AND (dce.fec_vencimiento) >= to_date('" + vFecIni + "','dd/MM/yyyy') "
                           + "   AND (dce.fec_vencimiento) <= to_date('" + vFecFin + "','dd/MM/yyyy') "
                           + "   AND dce.estado = 'V' "
                           + "   AND dce.cod_empleado = e.cod_empleado "
                           + "   AND e.activo = 'S' "
                           + "   AND e.cod_seccion = sec.cod_seccion "
                           + " ORDER BY dce.cod_empleado, dce.cod_concepto";   //son todos los debetos y creditos que posee
                //System.out.println(sql);
                ResultSet rset = DBManager.ejecutarDSL(sql);
                if (rset != null) {
                    procesarPreLiquidacion(vFecIni, rset);                     
                }
            }
        }
    }
    
    private boolean limpiarPreLiquidacioPeriodo(String periodo){
        boolean result = false;
        String sql = "DELETE FROM liquidacion_det WHERE periodo = '" + periodo + "' AND cod_empresa = " + codEmpresa + " AND cod_local = " + codLocal + " AND es_definitiva = 'N'";
        int a = DBManager.ejecutarDML(sql);
        if (a >= 0) {
            try {
                DBManager.conn.commit();
                result = true;
                String sqlCab = "DELETE FROM liquidacion_cab WHERE periodo = '" + periodo + "' AND cod_empresa = " + codEmpresa + " AND cod_local = " + codLocal + " AND es_definitiva = 'N'";
                int b = DBManager.ejecutarDML(sqlCab);
                if (DBManager.ejecutarDML(sqlCab) >= 0) {
                    try {
                        DBManager.conn.commit();
                        result = true;
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                        InfoErrores.errores(ex);
                        indice = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Error al borrar Pre-Liquidación (Cab) \n Operación Cancelada !!!", "Error", JOptionPane.WARNING_MESSAGE);
                    jLProceso.setText("ATENCION: Proceso Abortado !!!");
                    result = false;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                InfoErrores.errores(ex);
                indice = true;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error al borrar Pre-Liquidación (Det) \n Operación Cancelada !!!", "Error", JOptionPane.WARNING_MESSAGE);
            jLProceso.setText("ATENCION: Proceso Abortado !!!");
        }
        return result;
    }
    
    private void procesarPreLiquidacion(String fecInicial, ResultSet rs){
        int min = 0;
        int contHilo = 0;
        try{
            jProgressBar1.setValue(min);
            jProgressBar1.setMinimum(min);
            rs.last();
            int max = rs.getRow();
            String sql = "SELECT (coalesce(e.sueldo1,0) + coalesce(e.sueldo2,0)) sueldo, dh.cod_local, dh.cod_empleado, dh.periodo, dh.dias_laborales, " +
                         "dh.dias_trabajados, (dh.horas_trabajadas/60) AS horasTrabajadas, " +
                         "e.cod_seccion, sec.cod_centrocosto, " +
                         "(SELECT valor FROM parametro_rrhh WHERE cod_local = dh.cod_local AND cod_empresa = dh.cod_empresa AND parametro = 'RRHH_COD_CONCEPTO_SALARIO') AS cod_concepto_salario, " +
                         "(SELECT valor FROM parametro_rrhh WHERE cod_local = dh.cod_local AND cod_empresa = dh.cod_empresa AND parametro = 'RRHH_COD_CONCEPTO_HORAS_EXTRAS') AS cod_concepto_hx  " +
                         "FROM dia_hora dh, empleado e, seccion sec " +
                         "WHERE dh.cod_empleado = e.cod_empleado " +
                         "AND e.cod_seccion = sec.cod_seccion " +
                         "AND dh.estado = 'V' " +
                         "AND e.figura_planilla = 'S' " +
                         "AND e.activo = 'S' " +
                         "AND dh.periodo = " + periodo + " " +
                         "AND dh.cod_empresa = " + codEmpresa + " " +
                         "AND e.cod_local = " + codLocal + " " +
                         "ORDER BY e.cod_seccion, e.cod_empleado;";
            System.out.println("SQL Procesar Pre Liquidación: " + sql);
            Statement stmtDiaHora = DBManager.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rsDiaHora = stmtDiaHora.executeQuery(sql);
            if(rsDiaHora != null){
                try{
                    rsDiaHora.last();
                    max += rsDiaHora.getRow();
                    rsDiaHora.beforeFirst();
                }catch(SQLException sqlex){
                    sqlex.printStackTrace();
                    InfoErrores.errores(sqlex);
                    indice = true;
                }
            }
            jProgressBar1.setMaximum(max);
            try{
                rs.first();
                int nroSecuencia = 1;
                int codEmpleado = rs.getInt("cod_empleado");
                int codConcepto = rs.getInt("cod_concepto");
                int codSeccion = rs.getInt("cod_seccion");
                int codCentroCosto = rs.getInt("cod_centrocosto");
                double monto = rs.getDouble("monto");
                int canCuota = rs.getInt("can_cuota");
                String debCre = rs.getString("debcre");
                String obs = rs.getString("observacion");
                boolean ban = true;
                while(rs.next()){
                    if(ban){
                        rs.first();
                        monto = 0;
                        ban = false;
                    }
                    
                    if(codEmpleado != rs.getInt("cod_empleado")){
                        insertLiquidacionDet(codEmpleado, periodo, codConcepto, codSeccion, codCentroCosto, nroSecuencia, debCre, 1, monto, canCuota, obs);
                        nroSecuencia = 1;
                        codEmpleado = rs.getInt("cod_empleado");
                        codConcepto = rs.getInt("cod_concepto");
                        codSeccion = rs.getInt("cod_seccion");
                        codCentroCosto = rs.getInt("cod_centrocosto");
                        monto = rs.getDouble("monto");
                        canCuota = rs.getInt("can_cuota");
                        debCre = rs.getString("debcre");
                        obs = rs.getString("observacion");
                    }else{
                        if(codConcepto != rs.getInt("cod_concepto")){
                            insertLiquidacionDet(codEmpleado, periodo, codConcepto, codSeccion, codCentroCosto, nroSecuencia, debCre, monto, monto, canCuota, obs);
                            ++nroSecuencia;
                            codEmpleado = rs.getInt("cod_empleado");
                            codConcepto = rs.getInt("cod_concepto");
                            codSeccion = rs.getInt("cod_seccion");
                            codCentroCosto = rs.getInt("cod_centrocosto");
                            monto = rs.getDouble("monto");
                            canCuota = rs.getInt("can_cuota");
                            debCre = rs.getString("debcre");
                            obs = rs.getString("observacion");
                        }else{
                            monto += rs.getDouble("monto");
                        }
                    }
                    contHilo++;
                    jProgressBar1.setValue(contHilo);
                    synchronized(objeto){
                        try {
                            objeto.wait(10);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                            InfoErrores.errores(e);
                            indice = true;
                        }
                    }
                    /*if(codEmpleado > 0){
                        insertLiquidacionDet(codEmpleado, periodo, codConcepto, codSeccion, codCentroCosto, nroSecuencia, debCre, 1, monto, canCuota, obs);
                    }*/
                    //rs.close();
                }
            }catch(SQLException sqlex){
                sqlex.printStackTrace();
                InfoErrores.errores(sqlex);
            }
            
            /*
             * INSERTA DEB CRE PROGRAMADO
             */
            String sqlDebCre = "SELECT DCP.COD_EMPLEADO, e.activo, " +
                               "DCP.COD_CONCEPTO, C.DEBCRE, DCP.MONTO, DCP.OBSERVACION, e.cod_seccion, sec.cod_centrocosto " +
                               "FROM DEBCRE_EMPLEADO_PROGRAMADO DCP, concepto c, empleado e, seccion sec " +
                               "WHERE DCP.COD_CONCEPTO = C.COD_CONCEPTO " +
                               "AND DCP.COD_EMPLEADO = e.COD_EMPLEADO " +
                               "AND e.ACTIVO = 'S' " +
                               "AND e.cod_seccion = sec.cod_seccion " +
                               "AND DCP.FEC_INICIO <= to_date('" + utiles.Utiles.getFecFinalPeriodoRRHH(codEmpresa, codLocal) + "','dd/MM/yyyy') " +
                               "AND DCP.COD_EMPRESA = " + codEmpresa  +
                               "AND DCP.ACTIVO = 'S' " +
                               "AND DCP.COD_LOCAL = " + codLocal;
            ResultSet rsDebCreAutomatico = DBManager.ejecutarDSL(sqlDebCre);
            if(rsDebCreAutomatico != null){
                try{
                    rsDebCreAutomatico.last();
                    max += rsDebCreAutomatico.getRow();
                    rsDebCreAutomatico.beforeFirst();
                    while(rsDebCreAutomatico.next()){
                        insertDebCreProgramado(rsDebCreAutomatico);
                        contHilo++;
                        jProgressBar1.setValue(contHilo);
                    }
                }catch(SQLException sqlex){
                    sqlex.printStackTrace();
                    InfoErrores.errores(sqlex);
                    indice = true;
                }
                rsDebCreAutomatico.close();
            }else{
                indice = true;
            }
            
            /*
             * INSERTA SALARIOS - HORAS EXTRAS 
             */
            
            int diasLaborales = 30; //Integer.parseInt(utiles.Utiles.getDiasLaboralesRRHH(codEmpresa, codLocal));
            while(rsDiaHora.next()){
                insertSalarioHorasExtras(fecInicial, rsDiaHora, diasLaborales);
                contHilo++;
                jProgressBar1.setValue(contHilo);
            }
            rsDiaHora.close();
            stmtDiaHora.close();
            
            /*
             * INSERTA IPS OBRERO
             */
            
            String sqlIps = "SELECT ld.cod_empleado, e.cod_seccion, sec.cod_centrocosto, "
                          + "coalesce((SELECT sueldo2 FROM empleado WHERE cod_empleado = ld.cod_empleado), 0) sueldo2, "
                          + "(SELECT valor FROM parametro_rrhh WHERE cod_local = " + codLocal + " AND cod_empresa = " + codEmpresa + " "
                          + "AND parametro = 'RRHH_COD_CONCEPTO_IPS') cod_concepto, "
                          + "(ROUND(((SUM(monto)) * (SELECT valor FROM parametro_rrhh WHERE cod_local = " + codLocal + " AND cod_empresa = " + codEmpresa + " "
                          + "AND parametro = 'RRHH_PCT_IPS_OBRERO')::numeric)/100)) montoIps, "
                          + "((ROUND(((SUM((CASE WHEN ld.cod_concepto = (SELECT valor FROM parametro_rrhh WHERE cod_local = " + codLocal + " AND cod_empresa = "
                          + "" + codEmpresa + " AND parametro = 'RRHH_COD_CONCEPTO_SALARIO')::numeric THEN monto + 0 ELSE 0 END)) + (("
                          + "SELECT sueldo1 FROM empleado WHERE cod_empleado = ld.cod_empleado)/30 * (SELECT dias_trabajados FROM liquidacion_cab lc "
                          + "WHERE lc.cod_empleado = ld.cod_empleado AND lc.periodo = ld.periodo AND lc.cod_local = ld.cod_local)::numeric)) "
                          + " * (SELECT valor FROM parametro_rrhh WHERE cod_local = " + codLocal + " AND cod_empresa = " + codEmpresa + " "
                          + "AND parametro = 'RRHH_PCT_IPS_OBREO')::numeric)/100)),0) montoIpsSueldo1, "
                          + "(SELECT descuenta_ips FROM empleado WHERE cod_empleado = ld.cod_empleado) descuentaIps "
                          + "FROM liquidacion_det ld, concepto c, empleado e, seccion sec "
                          + "WHERE ld.cod_concepto = c.cod_concepto "
                          + "AND ld.cod_empleado = e.cod_empleado "
                          + "AND e.cod_seccion = sec.cod_seccion "
                          + "AND c.es_imponible_ips = 'S' "
                          + "AND c.debcre = 'C' "
                          + "AND e.activo = 'S' "
                          + "AND ld.periodo = " + periodo + " "
                          + "AND ld.cod_empresa = " + codEmpresa + " "
                          + "AND ld.cod_local = " + codLocal + " "
                          + "GROUP BY ld.cod_local, e.cod_seccion, sec.cod_centrocosto, ld.cod_empleado, ld.periodo";
            ResultSet rsInsertIps = DBManager.ejecutarDSL(sqlIps);
            if(rsInsertIps != null){
                try{
                    rsInsertIps.last();
                    max += rsInsertIps.getRow();
                    rsInsertIps.beforeFirst();
                    while(rsInsertIps.next()){
                        insertIps(rsInsertIps);
                        contHilo++;
                        jProgressBar1.setValue(contHilo);
                    }
                }catch(SQLException sqlex){
                    sqlex.printStackTrace();
                    InfoErrores.errores(sqlex);
                    indice = true;
                }
                rsInsertIps.close();
            }else{
                indice = true;
            }
            
            /*
             * INSERTA LIQUIDACION CAB
             */
            
            String sqlSelect = "SELECT e.cod_empleado, e.cod_seccion, e.sueldo1, e.sueldo2, "
                    + "         (CASE WHEN (SELECT SUM(cantidad) FROM liquidacion_det "
                    + "                     WHERE cod_empleado = e.cod_empleado "
                    + "                     AND periodo = " + periodo + " "
                    + "                     AND cod_empresa = " + codEmpresa + " "
                    + "                     AND cod_local = " + codLocal + " "
                    + "                     AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                         WHERE parametro = 'RRHH_COD_CONCEPTO_SALARIO' "
                    + "                                         AND cod_local = " + codLocal + " "
                    + "                                         AND cod_empresa = " + codEmpresa + ")::numeric limit 1) "
                    + "          IS NULL THEN 0 ELSE (SELECT SUM(cantidad) FROM liquidacion_det "
                    + "                               WHERE cod_empleado = e.cod_empleado "
                    + "                               AND periodo = " + periodo + " "
                    + "                               AND cod_local = " + codLocal +  " "
                    + "                               AND cod_empresa = " + codEmpresa + " "
                    + "                               AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                   WHERE parametro = 'RRHH_COD_CONCEPTO_SALARIO' "
                    + "                                                   AND cod_local = " + codLocal + " "
                    + "                                                   AND cod_empresa = " + codEmpresa + ")::numeric "
                    + "                               LIMIT 1) END) AS dias_trabajados, "
                    + ""
                    + "          (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det "
                    + "                      WHERE cod_empleado = e.cod_empleado "
                    + "                      AND periodo = " + periodo + " "
                    + "                      AND cod_local = " + codLocal + " "
                    + "                      AND cod_empresa = " + codEmpresa + " "
                    + "                      AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                          WHERE parametro = 'RRHH_COD_CONCEPTO_SALARIO' "
                    + "                                          AND cod_local = " + codLocal + " "
                    + "                                          AND cod_empresa = " + codEmpresa + ")::numeric LIMIT 1) "
                    + "           IS NULL THEN 0 ELSE (SELECT SUM(monto) FROM liquidacion_det "
                    + "                                WHERE cod_empleado = e.cod_empleado "
                    + "                                AND periodo = " + periodo + " "
                    + "                                AND cod_local = " + codLocal + " "
                    + "                                AND cod_empresa = " + codEmpresa + " "
                    + "                                AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                    WHERE parametro = 'RRHH_COD_CONCEPTO_SALARIO' "
                    + "                                                    AND cod_local = " + codLocal + " "
                    + "                                                    AND cod_empresa = " + codEmpresa + ")::numeric "
                    + "                                LIMIT 1) END) AS salario, "
                    + ""
                    + ""
                    + "           (CASE WHEN (SELECT SUM(cantidad) FROM liquidacion_det "
                    + "                       WHERE cod_empleado = e.cod_empleado "
                    + "                       AND periodo = " + periodo + " "
                    + "                       AND cod_empresa = " + codEmpresa + " "
                    + "                       AND cod_local = " + codLocal + " "
                    + "                       AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                           WHERE parametro = 'RRHH_COD_CONCEPTO_HORAS_EXTRAS' "
                    + "                                           AND cod_local = " + codLocal + " "
                    + "                                           AND cod_empresa = " + codEmpresa + ")::numeric LIMIT 1)"
                    + "            IS NULL THEN 0 ELSE (SELECT SUM(cantidad) FROM liquidacion_det "
                    + "                                 WHERE cod_empleado = e.cod_empleado "
                    + "                                 AND periodo = " + periodo + " "
                    + "                                 AND cod_local = " +codLocal + " "
                    + "                                 AND cod_empresa = " + codEmpresa + " "
                    + "                                 AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                     WHERE parametro = 'RRHH_COD_CONCEPTO_HORAS_EXTRAS' "
                    + "                                                     AND cod_local = " + codLocal + " "
                    + "                                                     AND cod_empresa = " + codEmpresa + ")::numeric "
                    + "                                 LIMIT 1) END) AS horas_extras, "
                    + ""
                    + "            ROUND((((((e.sueldo1 / 30) / 7) * (SELECT horas_extras FROM dia_hora WHERE periodo = " + periodo + " "
                    + "                                               AND cod_empleado = e.cod_empleado "
                    + "                                               AND estado = 'V' "
                    + "                                               AND situacion = 'C' )) / 100 ) * 30 ), 2) AS monto_horas_extras, "
                    + ""
                    + ""
                    + "            (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det "
                    + "                        WHERE cod_empleado = e.cod_empleado "
                    + "                        AND periodo = " + periodo + " "
                    + "                        AND cod_empresa = " + codEmpresa + " "
                    + "                        AND cod_local = " + codLocal + " "
                    + "                        AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                            WHERE parametro = 'RRHH_COD_CONCEPTO_IPS' "
                    + "                                            AND cod_local = " + codLocal + " "
                    + "                                            AND cod_empresa = " + codEmpresa + ")::numeric LIMIT 1)"
                    + "             IS NULL THEN 0 ELSE (SELECT SUM(monto) FROM liquidacion_det "
                    + "                                  WHERE cod_empleado = e.cod_empleado "
                    + "                                  AND periodo = " + periodo + " "
                    + "                                  AND cod_local = " + codLocal + " "
                    + "                                  AND cod_empresa = " + codEmpresa + " "
                    + "                                  AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                      WHERE parametro = 'RRHH_COD_CONCEPTO_IPS' "
                    + "                                                      AND cod_local = " + codLocal + " "
                    + "                                                      AND cod_empresa = " + codEmpresa + ")::numeric"
                    + "                                  LIMIT 1)END ) AS montoIps, "
                    + ""
                    + ""
                    + "             (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det "
                    + "                         WHERE cod_empleado = e.cod_empleado "
                    + "                         AND periodo = " + periodo + " "
                    + "                         AND cod_local = " + codLocal + " "
                    + "                         AND cod_empresa = "+ codEmpresa +" "
                    + "                         AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                             WHERE parametro = 'RRHH_COD_CONCEPTO_ASOCIACION' "
                    + "                                             AND cod_local = " + codLocal + " "
                    + "                                             AND cod_empresa = " + codEmpresa + ")::numeric LIMIT 1) "
                    + "              IS NULL THEN 0 ELSE(SELECT SUM(monto) FROM liquidacion_det "
                    + "                                  WHERE cod_empleado = e.cod_empleado "
                    + "                                  AND periodo = " + periodo + " "
                    + "                                  AND cod_local = " + codLocal + " "
                    + "                                  AND cod_empresa = " + codEmpresa + " "
                    + "                                  AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                      WHERE parametro = 'RRHH_COD_CONCEPTO_ASOCIACION' "
                    + "                                                      AND cod_local = " + codLocal + " "
                    + "                                                      AND cod_empresa = " + codEmpresa + ")::numeric "
                    + "                                  LIMIT 1)END) AS montoAsociacion, "
                    + ""
                    + ""
                    + "              (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det "
                    + "                          WHERE cod_empleado = e.cod_empleado "
                    + "                          AND periodo = " + periodo + " "
                    + "                          AND cod_local = " + codLocal + " "
                    + "                          AND cod_empresa = " + codEmpresa + " "
                    + "                          AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                              WHERE parametro = 'RRHH_COD_CONCEPTO_PATIOCOMIDA' "
                    + "                                              AND cod_local = " + codLocal + " "
                    + "                                              AND cod_empresa = " + codEmpresa + ")::numeric LIMIT 1)"
                    + "               IS NULL THEN 0 ELSE(SELECT SUM(monto) FROM liquidacion_det "
                    + "                                   WHERE cod_empleado = e.cod_empleado "
                    + "                                   AND cod_empresa = " + codEmpresa + " "
                    + "                                   AND cod_local = " + codLocal + " "
                    + "                                   AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                       WHERE parametro = 'RRHH_COD_CONCEPTO_PATIOCOMIDA' "
                    + "                                                       AND cod_empresa = " + codEmpresa + " "
                    + "                                                       AND cod_local = " + codLocal+ ")::numeric "
                    + "                                   LIMIT 1) END) AS monto_patioComida, "
                    + ""
                    + ""
                    + "               (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det "
                    + "                           WHERE cod_empleado = e.cod_empleado "
                    + "                           AND periodo = " + periodo + " "
                    + "                           AND cod_empresa = " + codEmpresa + " "
                    + "                           AND cod_local = " + codLocal + " "
                    + "                           AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                               WHERE parametro = 'RRHH_COD_CONCEPTO_UNIFORME' "
                    + "                                               AND cod_empresa = " + codEmpresa + " "
                    + "                                               AND cod_local = " + codLocal + ")::numeric LIMIT 1) "
                    + "                IS NULL THEN 0 ELSE (SELECT SUM(monto) FROM liquidacion_det "
                    + "                                     WHERE cod_empleado = e.cod_empleado "
                    + "                                     AND periodo = " + periodo + " "
                    + "                                     AND cod_empresa = " + codEmpresa + " "
                    + "                                     AND cod_local = " + codLocal + " "
                    + "                                     AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                         WHERE parametro = 'RRHH_COD_CONCEPTO_UNIFORME' "
                    + "                                                         AND cod_empresa = " + codEmpresa + " "
                    + "                                                         AND cod_local = " + codLocal + ")::numeric "
                    + "                LIMIT 1) END ) AS monto_uniforme, "
                    + ""
                    + ""
                    + "                (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det l, concepto c "
                    + "                            WHERE l.cod_empleado = e.cod_empleado "
                    + "                            AND l.periodo = " + periodo + " "
                    + "                            AND l.cod_empresa = " + codEmpresa + " "
                    + "                            AND l.cod_local = " + codLocal + " "
                    + "                            AND l.cod_concepto = c.cod_concepto "
                    + "                            AND l.debcre = 'D' "
                    + "                            AND l.cod_concepto NOT IN (SELECT valor::numeric FROM parametro_rrhh "
                    + "                                                       WHERE parametro IN ('RRHH_COD_CONCEPTO_SALARIO', "
                    + "                                                                           'RRHH_COD_CONCEPTO_HORAS_EXTRAS', "
                    + "                                                                           'RRHH_COD_CONCEPTO_IPS', "
                    + "                                                                           'RRHH_COD_CONCEPTO_ASOCIACION', "
                    + "                                                                           'RRHH_COD_CONCEPTO_PATIOCOMIDA', "
                    + "                                                                           'RRHH_COD_CONCEPTO_UNIFORME', "
                    + "                                                                           'RRHH_COD_CONCEPTO_ANTICIPO') "
                    + "                                                       AND cod_local = " + codLocal + " "
                    + "                                                       AND cod_empresa = " + codEmpresa + ")) "
                    + "                 IS NULL THEN 0 ELSE(SELECT SUM(monto) FROM liquidacion_det l, concepto c "
                    + "                                     WHERE l.cod_empleado = e.cod_empleado "
                    + "                                     AND l.periodo = " + periodo + " "
                    + "                                     AND l.cod_empresa = " + codEmpresa + " "
                    + "                                     AND l.cod_local = " + codLocal + " "
                    + "                                     AND l.cod_concepto = c.cod_concepto "
                    + "                                     AND c.debcre = 'D' "
                    + "                                     AND l.cod_concepto NOT IN (SELECT valor::numeric FROM parametro_rrhh "
                    + "                                                                WHERE parametro IN ('RRHH_COD_CONCEPTO_SALARIO', "
                    + "                                                                                    'RRHH_COD_CONCEPTO_HORAS_EXTRAS', "
                    + "                                                                                    'RRHH_COD_CONCEPTO_IPS', "
                    + "                                                                                    'RRHH_COD_CONCEPTO_ASOCIACION', "
                    + "                                                                                    'RRHH_COD_CONCEPTO_PATIOCOMIDA', "
                    + "                                                                                    'RRHH_COD_CONCEPTO_UNIFORME', "
                    + "                                                                                    'RRHH_COD_CONCEPTO_ANTICIPO') "
                    + "                                                                AND cod_local = " + codLocal + " "
                    + "                                                                AND cod_empresa = " + codEmpresa + ")) END ) AS monto_otrosDesc, "
                    + ""
                    + ""
                    + "                  (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det l, concepto c "
                    + "                              WHERE l.cod_empleado = e.cod_empleado "
                    + "                              AND l.periodo = " + periodo + " "
                    + "                              AND l.cod_empresa = " + codEmpresa + " "
                    + "                              AND l.cod_local =  " + codLocal + " "
                    + "                              AND l.cod_concepto = c.cod_concepto "
                    + "                              AND c.debcre = 'C' "
                    + "                              AND l.cod_concepto NOT IN (SELECT valor::numeric FROM parametro_rrhh "
                    + "                                                        WHERE parametro IN ('RRHH_COD_CONCEPTO_SALARIO', "
                    + "                                                                            'RRHH_COD_CONCEPTO_HORAS_EXTRAS', "
                    + "                                                                            'RRHH_COD_CONCEPTO_IPS', "
                    + "                                                                            'RRHH_COD_CONCEPTO_ASOCIACION', "
                    + "                                                                            'RRHH_COD_COCEPTO_PATIOCOMIDA', "
                    + "                                                                            'RRHH_COD_CONCEPTO_UNIFORME', "
                    + "                                                                            'RRHH_COD_CONCEPTO_ANTICIPO') "
                    + "                                                        AND cod_empresa = " + codEmpresa + " "
                    + "                                                        AND cod_local = " + codLocal + ")) "
                    + "                  IS NULL THEN 0 ELSE (SELECT SUM(monto) FROM liquidacion_det l, concepto c "
                    + "                                       WHERE l.cod_empleado = e.cod_empleado "
                    + "                                       AND l.periodo = " + periodo + " "
                    + "                                       AND l.cod_empresa = " + codEmpresa + " "
                    + "                                       AND l.cod_local = " + codLocal + " "
                    + "                                       AND l.cod_concepto = c.cod_concepto "
                    + "                                       AND c.debcre = 'C' "
                    + "                                       AND l.cod_concepto NOT IN (SELECT valor::numeric FROM parametro_rrhh "
                    + "                                                                  WHERE parametro IN ('RRHH_COD_CONCEPTO_SALARIO', "
                    + "                                                                                      'RRHH_COD_CONCEPTO_HORAS_EXTRAS', "
                    + "                                                                                      'RRHH_COD_CONCEPTO_IPS', "
                    + "                                                                                      'RRHH_COD_CONCEPTO_ASOCIACION', "
                    + "                                                                                      'RRHH_COD_COCEPTO_PATIOCOMIDA', "
                    + "                                                                                      'RRHH_COD_CONCEPTO_UNIFORME', "
                    + "                                                                                      'RRHH_COD_CONCEPTO_ANTICIPO') "
                    + "                                                                  AND cod_empresa = " + codEmpresa + " "
                    + "                                                                  AND cod_local = " + codLocal + ")) END) AS monto_otrosBeneficios, "
                    + ""
                    + ""
                    + "                  (CASE WHEN (SELECT SUM(monto) FROM liquidacion_det "
                    + "                              WHERE cod_empleado = e.cod_empleado "
                    + "                              AND periodo = " + periodo + " "
                    + "                              AND cod_empresa = " + codEmpresa + " "
                    + "                              AND cod_local = " + codLocal + " "
                    + "                              AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                  WHERE parametro = 'RRHH_COD_CONCEPTO_ANTICIPO' "
                    + "                                                  AND cod_empresa = " + codEmpresa + " "
                    + "                                                  AND cod_local = " + codLocal + ")::numeric LIMIT 1) "
                    + "                   IS NULL THEN 0 ELSE (SELECT SUM(monto) FROM liquidacion_det "
                    + "                                        WHERE cod_empleado = e.cod_empleado "
                    + "                                        AND periodo = " + periodo + " "
                    + "                                        AND cod_empresa = " + codEmpresa + " "
                    + "                                        AND cod_local = " + codLocal + " "
                    + "                                        AND cod_concepto = (SELECT valor FROM parametro_rrhh "
                    + "                                                            WHERE parametro = 'RRHH_COD_CONCEPTO_ANTICIPO' "
                    + "                                                            AND cod_empresa = " + codEmpresa + " "
                    + "                                                            AND cod_local = " + codLocal + ")::numeric LIMIT 1)END ) AS monto_anticipo "
                    + ""
                    + ""
                    + "                   FROM empleado e"
                    + "                   WHERE EXISTS (SELECT * FROM liquidacion_det "
                    + "                                 WHERE cod_empleado = e.cod_empleado "
                    + "                                 AND periodo = " + periodo + " "
                    + "                                 AND cod_empresa = " + codEmpresa + " "
                    + "                                 AND cod_local = " + codLocal + " "
                    + "                                 AND e.activo = 'S' "
                    + "                                 AND e.cod_local = " + codLocal + " "
                    + "                                 ORDER BY e.cod_empleado)";
            
            //System.out.println("SQL SELECT: " + sqlSelect);
            ResultSet rsLiqCab = DBManager.ejecutarDSL(sqlSelect);
            if(rsLiqCab != null){
                try{
                    rsLiqCab.last();
                    max += rsLiqCab.getRow();
                    rsLiqCab.beforeFirst();
                    while(rsLiqCab.next()){
                        int codEmpleado = rsLiqCab.getInt("cod_empleado");
                        int codSeccion = rsLiqCab.getInt("cod_seccion");
                        double sueldo1 = rsLiqCab.getDouble("sueldo1");
                        double sueldo2 = rsLiqCab.getDouble("sueldo2");
                        int diasTrabajados = rsLiqCab.getInt("dias_trabajados");
                        double salario = rsLiqCab.getDouble("salario");
                        double cant_hx = rsLiqCab.getDouble("horas_extras");
                        double monto_hx = rsLiqCab.getDouble("monto_horas_extras");
                        double ips = rsLiqCab.getDouble("montoIps");
                        double asociacion = rsLiqCab.getDouble("montoAsociacion");
                        double comida = rsLiqCab.getDouble("monto_patioComida");
                        double uniforme = rsLiqCab.getDouble("monto_uniforme");
                        double anticipo = rsLiqCab.getDouble("monto_anticipo");
                        double otrosDescuentos = rsLiqCab.getDouble("monto_otrosDesc");
                        double otrosBeneficios = rsLiqCab.getDouble("monto_otrosBeneficios");
                        int codCentroCosto = utiles.Utiles.getCodCentroCosto(codSeccion);
                        
                        insertLiquidacionCab(codEmpleado, codSeccion, sueldo1, sueldo2, diasTrabajados, salario, cant_hx, monto_hx, ips, comida, 
                                             asociacion, uniforme, anticipo, otrosDescuentos, otrosBeneficios, codCentroCosto, 0, 0);
                        
                        contHilo++;
                        jProgressBar1.setValue(contHilo);
                    }
                }catch(SQLException sqlex){
                    sqlex.printStackTrace();
                    InfoErrores.errores(sqlex);
                    indice = true;
                }
                rsLiqCab.close();
            }else{
                indice = true;
            }
            
            contHilo++;
            jProgressBar1.setValue(contHilo);
            if(indice){
                jLProceso.setText("ERROR: Proceso Interrumpido!");
                hilo.interrupt();
            }else{
                jLProceso.setText("EXITO: Proceso Finalizado!");
            }
            jBSalir.setEnabled(true);
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
            jLProceso.setText("ERROR: Proceso de Cierre Interrumpido!");
            hilo.interrupt();
            jBSalir.setEnabled(true);
        }
    }
    
    private void insertLiquidacionDet(int codEmpleado, String periodo, int codConcepto, int codSeccion, 
                                      int codCentroCosto, int nroSecuencia, String debCre, double cantidad, 
                                      double monto, int canCuotas, String obs){
        try{
            int lenght = obs.length();
            if(lenght > 35){
                obs = obs.substring(0, 35);
            }
            String codPCuenta = getCodPCuenta(codCentroCosto, codConcepto, canCuotas);
            String sql = "INSERT INTO liquidacion_det(COD_EMPLEADO, PERIODO, COD_CONCEPTO, NRO_SECUENCIA, "
                    + " DEBCRE, CANTIDAD, MONTO, FEC_VIGENCIA, "
                    + " OBSERVACION, COD_EMPRESA, COD_LOCAL, ES_DEFINITIVA, cod_seccion, "
                    + " cod_centrocosto, cod_pcuenta) VALUES ( "
                    + codEmpleado + "," + periodo + "," + codConcepto + ","  
                    + " (SELECT coalesce(MAX(NRO_SECUENCIA),0)+1 FROM LIQUIDACION_DET "
                    + " WHERE COD_EMPRESA = " + codEmpresa
                    + "   AND COD_LOCAL = " + codLocal
                    + "   AND COD_EMPLEADO = " + codEmpleado
                    + "   AND PERIODO = " + periodo + "),'"
                    + debCre + "'," + cantidad + "," + monto + ", now(), '" 
                    + obs.replace("'", "") + "'," + codEmpresa + ","
                    + codLocal + ", 'N'," + codSeccion + "," 
                    + codCentroCosto + ",'" + codPCuenta + "')";
            System.out.println("SQL INSERT LIQUIDACION DET: " + sql);
            if (DBManager.ejecutarDML(sql) > 0) {
                DBManager.conn.commit();
            } else {
                JOptionPane.showMessageDialog(this, "ATENCION: \n Error al Grabar Datos de Liquidación (Detalle) \n "
                        + " Funcionario: " + codEmpleado + " \n Concepto: " + codConcepto + " \n Operación Cancelada !!!", "Error", JOptionPane.WARNING_MESSAGE);
                hilo.interrupt();
                indice = true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }
    }
    
    private String getCodPCuenta(int codCentroCosto, int codConcepto, int canCuotas){
        String result = "0";
        try{
            String sel = "SELECT con.campo_centrocosto FROM concepto con WHERE cod_concepto = " + codConcepto;
            ResultSet rx = DBManager.ejecutarDSL(sel);
            if (rx.next()) {
                String campo = rx.getString(1).trim();
                rx.close();
                if (campo.length() > 5) {
                    String sql = "SELECT cc." + campo
                            + " FROM centrocosto cc "
                            + " WHERE cc.cod_centrocosto = " + codCentroCosto;
                    if ((canCuotas > 1) && (campo.equals("COD_PCUENTA_ANTICIPO"))) {
                        sql = "SELECT cc.cod_pcuenta_prestamo "
                                + " FROM centrocosto cc "
                                + " WHERE cc.cod_centrocosto = " + codCentroCosto;
                    }
                    //rx = DBManager.ejecutarDSLnew(sql);                    
                    Statement stmt = DBManager.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    rx = stmt.executeQuery(sql);
                    if (rx.next()) {
                        result = rx.getString(1);
                    }
                    stmt.close();
                }
            }
            rx.close();
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }
        return result;
    }
    
    private void insertDebCreProgramado(ResultSet rs){
        try{
            int codEmpleado = rs.getInt("cod_empleado");
            int codConcepto = rs.getInt("cod_concepto");
            int codSeccion = rs.getInt("cod_seccion");
            int codCentroCosto = rs.getInt("cod_centrocosto");
            double monto = rs.getDouble("monto");
            String debCre = rs.getString("debcre");
            String obs = rs.getString("observacion");
            if(monto > 0){
                insertLiquidacionDet(codEmpleado, periodo, codConcepto, codSeccion, codCentroCosto, 0, debCre, 1, monto, 1, obs);
            }
        }catch(SQLException sqlex){
            sqlex.printStackTrace();
            InfoErrores.errores(sqlex);
            indice = true;
        }
    }
    
    
    private void insertSalarioHorasExtras(String fecInicial, ResultSet rs, int diasLaboralesPeriodo){
        if(rs != null){
            try{
                double sueldo = rs.getDouble("sueldo");
                int codLocal = rs.getInt("cod_local");
                int codEmpleado = rs.getInt("cod_empleado");
                int codSeccion = rs.getInt("cod_seccion");
                int codCentroCosto = rs.getInt("cod_centrocosto");
                String periodo = rs.getString("periodo");
                int diasLaborales = rs.getInt("dias_laborales");
                int diasTrabajados = rs.getInt("dias_trabajados");
                double horasTrabajadas = rs.getDouble("horasTrabajadas");
                int conceptoSalario = rs.getInt("cod_concepto_salario");
                String debCre = "C";
                int conceptoHorasExtras = rs.getInt("cod_concepto_hx");
                int diasFiscales = 30;
                
                
                double sueldoDia = sueldo / 30;
                double sueldoHora = (sueldo / 30) / 8;
                
                insertLiquidacionDet(codEmpleado, periodo, conceptoSalario, codSeccion, codCentroCosto, 0, 
                                     debCre, diasFiscales, (sueldoDia * diasFiscales), 1, "Salario");
                
                insertLiquidacionDet(codEmpleado, periodo, conceptoHorasExtras, codSeccion, codCentroCosto, 0, debCre, 0, 0, 1, "Horas Extras");
                
            }catch(SQLException sqlex){
                sqlex.printStackTrace();
                InfoErrores.errores(sqlex);
                indice = true;
            }
        }
    }
    
    private void insertIps(ResultSet rs){
        try{
            int codEmpleado = rs.getInt("cod_empleado");
            int codCocepto = rs.getInt("cod_concepto");
            int codSeccion = rs.getInt("cod_seccion");
            int codCentroCosto = rs.getInt("cod_cetrocosto");
            double montoIps = rs.getDouble("montoIps");
            double sueldo2 = rs.getDouble("sueldo2");
            if(sueldo2 > 0){
                montoIps = getIpsSueldo1(codEmpleado, periodo);
            }
            if(rs.getString("descuenta_ips").equals("N")){
                montoIps = 0;
            }
            
            if(montoIps > 0){
                insertLiquidacionDet(codEmpleado, periodo, codCocepto, codSeccion, codCentroCosto, 0, "D", 1, montoIps, 1, "IPS");
            }
        }catch(SQLException sqlex){
            sqlex.printStackTrace();
            InfoErrores.errores(sqlex);
            indice = true;
        }
    }
    
    private double getIpsSueldo1(int codEmpleado, String periodo){
        double result = 0;
        StatementManager sm = new StatementManager();
        sm.TheSql = "SELECT COALESCE(sueldo1/30,0) * (SELECT COALESCE(cantidad, 0) "
                  + "FROM liquidacion_det ld "
                  + "WHERE ld.cod_concepto = (SELECT valor::numeric FROM parametro_rrhh WHERE cod_local = " + codLocal + " AND cod_empresa = " + codEmpresa + " "
                  + "AND parametro = 'RRHH_COD_CONCEPTO_SALARIO') "
                  + "AND ld.cod_empleado = " + codEmpleado + " "
                  + "AND ld.periodo = " + periodo + " "
                  + "AND ld.cod_local = " + codLocal + ") * "
                  + "(SELECT COALESCE(valor::numeric, 0) "
                  + "FROM parametro_rrhh "
                  + "WHERE cod_local = " + codLocal + " "
                  + "AND cod_empresa = " + codEmpresa + " "
                  + "AND parametro = 'RRHH_PCT_IPS_OBRERO') 100 AS montoIpsSueldo1 "
                  + "FROM empleado WHERE cod_empleado = " + codEmpleado;
        
        try{
            sm.EjecutarSql();
            if(sm.TheResultSet.next()){
                result = sm.TheResultSet.getDouble("montoIpsSueldo1");
            }
        }catch(SQLException sqlex){
            sqlex.printStackTrace();
            InfoErrores.errores(sqlex);
        }finally{
            sm.CerrarStatement();
            sm = null;
        }
        return result;
    }
    
    private void insertLiquidacionCab(int codEmpleado, int codSeccion, double sueldo1, double sueldo2, 
                                      int diasTrabajados, double sueldo, double cant_hx, 
                                      double monto_hx, double ips, double asociacion, double comida, 
                                      double uniforme, double anticipo, double otrosDescuentos, double otrosBeneficios, 
                                      int codCentroCosto, double bonificacionFamiliar, double falloCaja){
        
        String sql = "INSERT INTO liquidacion_cab (idperiodo, cod_empleado, periodo, cod_seccion, sueldo1, sueldo2, "
                + "                                dias_trabajados, dias_ips, sueldo_monto, cant_horas_extras, monto_horas_extras, "
                + "                                bonif_familiar, otros_beneficios, vacaciones, ips_obrero, asociacion_empleado, "
                + "                                consumo_alimentacion, uniforme, anticipo, otros_descuentos, fec_vigencia, cod_usuario, "
                + "                                es_definitiva, cod_empresa, cod_local, cod_centrocosto, estado, fallo_caja) "
                + "   VALUES (" + jTFIdPeriodo.getText() + ", " + codEmpleado + ", " + periodo + ", " + codSeccion + ", " + sueldo1 + ", " + sueldo2 + ", "
                + "           " + diasTrabajados + ", 0, " + sueldo + ", " + cant_hx + ", " + monto_hx + ", "
                + "           " + bonificacionFamiliar + ", " + otrosBeneficios + ", 0, " + ips + ", " + asociacion + ", "
                + "           " + comida + ", " + uniforme + ", " + anticipo + ", " + otrosDescuentos + ", now(), " + FormMain.codUsuario + ", "
                + "           'N', " + codEmpresa + ", " + codLocal + ", " + codCentroCosto + ", 'V', " + falloCaja+ ")"; 
        
        System.out.println("INSERT LIQUIDACION CAB: " + sql);
        if(diasTrabajados == 0){
        }else{
            if(DBManager.ejecutarDML(sql) > 0){
                try{
                    DBManager.conn.commit();
                }catch(SQLException sqlex){
                    sqlex.printStackTrace();
                    InfoErrores.errores(sqlex);
                    indice = true;
                    hilo.interrupt();
                }
            }else{
                JOptionPane.showMessageDialog(this, "Atencion: \n Error al Grabar datos del Funcionario: " + codEmpleado + " !!! \n Operación Cancelada...", "Error", JOptionPane.WARNING_MESSAGE);
                indice = true;
                hilo.interrupt();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreLiquidacionSalarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreLiquidacionSalarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreLiquidacionSalarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreLiquidacionSalarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PreLiquidacionSalarios dialog = new PreLiquidacionSalarios(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBProcesarPreLiquidacion;
    private javax.swing.JButton jBSalir;
    private javax.swing.JLabel jLProceso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTFFecFinPeriodo;
    private javax.swing.JTextField jTFFecInicioPeriodo;
    private javax.swing.JTextField jTFIdPeriodo;
    private javax.swing.JTextField jTFPeriodo;
    // End of variables declaration//GEN-END:variables
}
