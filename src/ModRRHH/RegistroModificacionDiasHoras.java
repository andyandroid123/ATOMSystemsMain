/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModRRHH;

import controls.EmpleadoCtrl;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import principal.FormMain;
import utiles.CellRenderer;
import utiles.DBManager;
import utiles.Focus;
import utiles.InfoErrores;
import utiles.MaxLength;
import utiles.StatementManager;
import utiles.TableRegistroModificacionDiasHoras;
import utiles.Utiles;
import views.busca.DlgConsultas;

/**
 *
 * @author Andres
 */
public class RegistroModificacionDiasHoras extends javax.swing.JDialog {

    public static DefaultTableModel dtm = new DefaultTableModel(null, 
                                                  new String[]{"Código", "Empleado", "Periodo", "Días Laborales", "Días Trabajados", "Días Fiscal", 
                                                      "Horas Trabajadas", "Horas Extras"});
    
    TableRegistroModificacionDiasHoras tableRegistroDiasHoras;
    private JTextField jTFCodEmpleadoTable = new javax.swing.JTextField();
    
    public RegistroModificacionDiasHoras(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        jTFPeriodoRRHH.setText(getPeriodoRRHH());
        jTFCodEmpleado.addFocusListener(new Focus());
        jTFCodEmpleado.setDocument(new MaxLength(4, "", "ENTERO"));
        jTFCodEmpleado.setText("0");
    }

    private String getNombreEmpleado(String codigo) {
        String result = "";
        if (Utiles.isIntegerValid(codigo)) {
            EmpleadoCtrl ctrl = new EmpleadoCtrl();
            result = ctrl.getNombreEmpleado(Integer.valueOf(codigo));
            ctrl = null;
        }
        return result;
    }
    
    private String getPeriodoRRHH(){
        String periodo = "";
        try{
            String sql = "SELECT periodo FROM periodo_rrhh WHERE vigente = 'S'"; 
            System.out.println("PERIODO RRHH: " + sql);
            ResultSet rs = DBManager.ejecutarDSL(sql);
            if(rs != null){
                if(rs.next()){
                    periodo = rs.getString("periodo");
                }
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }finally{
            DBManager.CerrarStatements();
        }
        return periodo;
    }
    
    private void setEstadoBotonesNuevo(){
        jBBuscar.setEnabled(false);
        jBCancelar.setEnabled(true);
        jBGuardar.setEnabled(false);
        jBModificar.setEnabled(true);
        jBNuevo.setEnabled(false);
        jBSalir.setEnabled(false);
    }
    
    private void setEstadoBotonesCancelar(){
        jBBuscar.setEnabled(true);
        jBCancelar.setEnabled(false);
        jBGuardar.setEnabled(false);
        jBModificar.setEnabled(false);
        jBNuevo.setEnabled(true);
        jBSalir.setEnabled(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTFCodEmpleado = new javax.swing.JTextField();
        jTFNombreEmpleado = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTFPeriodoRRHH = new javax.swing.JTextField();
        jBBuscar = new javax.swing.JButton();
        jBNuevo = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDiasHoras = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ATOMSystems|Main - Registro y Modificación de Días y Horas Trabajadas");

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jPanel5.setBackground(new java.awt.Color(204, 255, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("REGISTRO - MODIFICACION DE DIAS Y HORAS TRABAJADAS");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Empleado:");

        jTFCodEmpleado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFCodEmpleado.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTFCodEmpleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFCodEmpleadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFCodEmpleadoFocusLost(evt);
            }
        });
        jTFCodEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFCodEmpleadoKeyPressed(evt);
            }
        });

        jTFNombreEmpleado.setEditable(false);
        jTFNombreEmpleado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Periodo:");

        jTFPeriodoRRHH.setEditable(false);
        jTFPeriodoRRHH.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFPeriodoRRHH.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jBBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/buscar24.png"))); // NOI18N
        jBBuscar.setText("Buscar");
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jBNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/nuevo24.png"))); // NOI18N
        jBNuevo.setText("Nuevo");
        jBNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNuevoActionPerformed(evt);
            }
        });

        jBGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/guardar24.png"))); // NOI18N
        jBGuardar.setText("Guardar");
        jBGuardar.setEnabled(false);
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/modificar24.png"))); // NOI18N
        jBModificar.setText("Modificar");
        jBModificar.setEnabled(false);
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cancelar24.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.setEnabled(false);
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/salir24.png"))); // NOI18N
        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFCodEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFNombreEmpleado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFPeriodoRRHH, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jBBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBBuscar, jBCancelar, jBGuardar, jBModificar, jBNuevo, jBSalir});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFCodEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTFPeriodoRRHH, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBuscar)
                    .addComponent(jBNuevo)
                    .addComponent(jBGuardar)
                    .addComponent(jBModificar)
                    .addComponent(jBCancelar)
                    .addComponent(jBSalir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jTDiasHoras = new JTable(){

            public boolean isCellEditable(int rowIndex, int colIndex) {

                if(colIndex == 4 ){ // La 4ta columna isEditable(true)
                    return true;
                }else{
                    return false; //Las celdas no son editables.
                }
                //return false; //Las celdas no son editables.
            }
        };
        jTDiasHoras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTDiasHoras.setToolTipText("F1 para consulta de Empleados - F2 Registro de Empleados");
        jTDiasHoras.setEnabled(false);
        jTDiasHoras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTDiasHorasKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTDiasHoras);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(714, 669));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTFCodEmpleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodEmpleadoFocusGained
        jTFCodEmpleado.selectAll();
    }//GEN-LAST:event_jTFCodEmpleadoFocusGained

    private void jTFCodEmpleadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCodEmpleadoKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jBBuscar.doClick();
            jBBuscar.grabFocus();
        }
        
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            try {
                DlgConsultas empleados = new DlgConsultas(new JFrame(), true);
                empleados.pack();
                empleados.setTitle("ATOMSystems|Main - Consulta de Empleados");
                empleados.dConsultas("empleado", "nombre", "cod_empleado", "nombre", "apellido", "fec_ingreso", "Codigo", "Nombre", "Apellido", "Ingreso");
                empleados.setText(jTFCodEmpleado);
                empleados.tfDescripcionBusqueda.setText("%");
                empleados.tfDescripcionBusqueda.selectAll();
                empleados.setVisible(true);
            } catch (Exception ex) {
                ex.printStackTrace();
                InfoErrores.errores(ex);
                JOptionPane.showMessageDialog(this, "No se pudo crear el Formulario de Consulta!", "ATENCION", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTFCodEmpleadoKeyPressed

    private void jTFCodEmpleadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodEmpleadoFocusLost
        if(jTFCodEmpleado.getText().equals("0")){
            jTFNombreEmpleado.setText("TODOS");
        }else{
            jTFNombreEmpleado.setText(getNombreEmpleado(jTFCodEmpleado.getText()));
        }
    }//GEN-LAST:event_jTFCodEmpleadoFocusLost

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jBNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNuevoActionPerformed
        setEstadoBotonesNuevo();
        opcionesNuevoRegistro();
        
    }//GEN-LAST:event_jBNuevoActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        setEstadoBotonesCancelar();
        limpiarTabla();
        //tableRegistroDiasHoras.limpiar();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jTDiasHorasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTDiasHorasKeyPressed
                                                 
        if(evt.getKeyCode() == KeyEvent.VK_F1){
            try {
                DlgConsultas empleados = new DlgConsultas(new JFrame(), true);
                empleados.pack();
                empleados.setTitle("ATOMSystems|Main - Consulta de Empleados");
                empleados.dConsultas("empleado", "nombre", "cod_empleado", "nombre", "apellido", "fec_ingreso", "Codigo", "Nombre", "Apellido", "Ingreso");                
                empleados.setText(jTFCodEmpleadoTable);
                Object[] codEmpleado = {1};
                codEmpleado[0] = jTFCodEmpleadoTable.getText();
                dtm.addRow(codEmpleado);
                configuraTabla();
                jTDiasHoras.updateUI();
                empleados.tfDescripcionBusqueda.setText("%");
                empleados.tfDescripcionBusqueda.selectAll();                
                empleados.setVisible(true);
            } catch (Exception ex) {
                ex.printStackTrace();
                InfoErrores.errores(ex);
                JOptionPane.showMessageDialog(this, "No se pudo crear el Formulario de Consulta!", "ATENCION", JOptionPane.WARNING_MESSAGE);
            }
        }
        
        if(evt.getKeyCode() == KeyEvent.VK_F2){
            Empleados empleados = new Empleados(new JFrame(), true);
            empleados.pack();
            empleados.setVisible(true);
        }
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            updateHorasTrabajadas();
        } 
    }//GEN-LAST:event_jTDiasHorasKeyPressed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        
        updateHorasTrabajadas();
        
        String codEmpresa = utiles.Utiles.getCodEmpresaDefault();
        String codLocal = utiles.Utiles.getCodLocalDefault(codEmpresa);
        int codEmpleado = 0;
        int periodo = Integer.parseInt(jTFPeriodoRRHH.getText());
        int diasLaborales = 0;
        int diasTrabajados = 0;
        int horasTrabajadas = 0;
        int horasExtras = 0;
        String estado = "V";
        int codUsuario = FormMain.codUsuario;
        String fecVigencia = "now()";
        String sql = "";
        boolean result = true;
        
        int rowCount = dtm.getRowCount();
        if(rowCount > 0){            
            for(int i = 0; i < rowCount; i++){
                codEmpleado = Integer.parseInt(jTDiasHoras.getValueAt(i, 0).toString());
                diasLaborales = Integer.parseInt(jTDiasHoras.getValueAt(i, 3).toString());
                diasTrabajados = Integer.parseInt(jTDiasHoras.getValueAt(i, 4).toString());
                horasTrabajadas = Integer.parseInt(jTDiasHoras.getValueAt(i, 6).toString());
                horasExtras = Integer.parseInt(jTDiasHoras.getValueAt(i, 7).toString());
                
                if(existeRegistroPeriodo(codEmpleado, periodo)){
                    sql = "UPDATE dia_hora SET dias_trabajados = " + diasTrabajados + ", horas_extras = " + horasExtras + 
                          ", cod_usuario = " + codUsuario + ", fec_vigencia ='" + fecVigencia + "', horas_trabajadas = " + horasTrabajadas + ", " +
                          "situacion = 'C' WHERE cod_empleado = " + codEmpleado + " AND periodo = " + periodo + "";
                }else{
                    sql = "INSERT INTO dia_hora (cod_empresa, cod_local, cod_empleado, periodo, dias_laborales, dias_trabajados, horas_trabajadas, " +
                          "horas_extras, estado, cod_usuario, fec_vigencia, situacion) " +
                          "VALUES (" + codEmpresa + ", " +
                                   ""+ codLocal + ", " +
                                   ""+ codEmpleado + ", " +
                                   ""+ periodo + ", " + 
                                   ""+ diasLaborales + ", " +
                                   ""+ diasTrabajados + ", " +
                                   ""+ horasTrabajadas + ", " +
                                   ""+ horasExtras + ", '" +
                                   ""+ estado + "', " +
                                   ""+ codUsuario + ", '" +
                                   ""+ fecVigencia + "', 'C')";
                }
                System.out.println("SQL GUARDAR DATOS: " + sql);
                if(DBManager.ejecutarDML(sql) > 0){
                    try{
                        DBManager.conn.commit();
                        result = true;
                        setEstadoBotonesGrabado();
                    }catch(Exception ex){
                        ex.printStackTrace();
                        result = false;
                    }
                }else{
                    JOptionPane.showMessageDialog(this,
                    "Error al Grabar Datos, Operacion Cancelada !!!",
                    "Error", JOptionPane.WARNING_MESSAGE);
                    result = false;
                    break;
                }
            }
            
            if(result){
                JOptionPane.showMessageDialog(this, "Datos Grabados!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(this, "Problemas al grabar datos, verifique!", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        setEstadoBotonesModificar();
        jTDiasHoras.setEnabled(true);
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        limpiarTabla();
        jTDiasHoras.setEnabled(false);
        if(jTFCodEmpleado.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Debe informar un empleado!", "Aviso", JOptionPane.WARNING_MESSAGE);
            jTFCodEmpleado.grabFocus();
        }else{
            cargaRegistroEmpleado(jTFCodEmpleado.getText(), jTFPeriodoRRHH.getText());
            habilitarBotonModificar();
        }
    }//GEN-LAST:event_jBBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroModificacionDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroModificacionDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroModificacionDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroModificacionDiasHoras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RegistroModificacionDiasHoras dialog = new RegistroModificacionDiasHoras(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBGuardar;
    private static javax.swing.JButton jBModificar;
    private javax.swing.JButton jBNuevo;
    private javax.swing.JButton jBSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTDiasHoras;
    private javax.swing.JTextField jTFCodEmpleado;
    private javax.swing.JTextField jTFNombreEmpleado;
    public static javax.swing.JTextField jTFPeriodoRRHH;
    // End of variables declaration//GEN-END:variables

    public static void configuraTabla() {
        jTDiasHoras.setModel(dtm);       
        jTDiasHoras.setDefaultRenderer(Object.class, new CellRenderer());
        jTDiasHoras.setRowHeight(22);
        //utiles.Utiles.punteroTablaF(jTDiasHoras, this);
        
        jTDiasHoras.getColumnModel().getColumn(0).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(1).setPreferredWidth(180);
        jTDiasHoras.getColumnModel().getColumn(2).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(3).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(4).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(5).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(6).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(7).setPreferredWidth(30);
    }
    
    private void configuraTablaNuevo(){
        jTDiasHoras.setDefaultRenderer(Object.class, new CellRenderer());
        jTDiasHoras.setRowHeight(22);
        utiles.Utiles.punteroTablaF(jTDiasHoras, this);
        
        jTDiasHoras.getColumnModel().getColumn(0).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(1).setPreferredWidth(180);
        jTDiasHoras.getColumnModel().getColumn(2).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(3).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(4).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(5).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(6).setPreferredWidth(30);
        jTDiasHoras.getColumnModel().getColumn(7).setPreferredWidth(30);
    }
    
    public static void cargaAutomaticaDatos(){
        int rows = 0;
        StatementManager sm = new StatementManager();
        String periodo = jTFPeriodoRRHH.getText();
        String diasTrabajados = "30";
        String horasExtras = "0";
        try{
            String sql = "SELECT cod_empleado, nombre || ' ' || apellido AS nombreEmpleado, (SELECT valor FROM parametros WHERE " +
                         "parametro = 'RRHH_DIAS_LABORALES') AS diasLaborales, " +
                         "(SELECT valor FROM parametros WHERE parametro = 'RRHH_DIAS_FISCAL') AS diasFiscal, " +
                         "(SELECT valor FROM parametros WHERE parametro = 'RRHH_HORAS_TRABAJADAS') AS horasTrabajadas " +
                         "FROM empleado " +     
                         "WHERE figura_planilla = 'S' AND activo = 'S' " +                         
                         "ORDER BY cod_empleado";
            System.out.println("SQL CARGA AUTOMATICA: " + sql);
            sm.TheSql = sql;
            sm.EjecutarSql();
            dtm.setRowCount(0);
            
            if(sm.TheResultSet != null){
                while(sm.TheResultSet.next()){
                    Object [] row = new Object[8];
                    row[0] = sm.TheResultSet.getString("cod_empleado");
                    row[1] = sm.TheResultSet.getString("nombreEmpleado");
                    row[2] = periodo;
                    row[3] = sm.TheResultSet.getString("diasLaborales");
                    row[4] = diasTrabajados;
                    row[5] = sm.TheResultSet.getString("diasFiscal");
                    row[6] = sm.TheResultSet.getString("horasTrabajadas");
                    row[7] = horasExtras;
                    dtm.addRow(row);
                }
                configuraTabla();
                rows = dtm.getRowCount();
                jTDiasHoras.updateUI();
                habilitarBotonModificar();
            }else{
                rows = 0;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }finally{
            sm.CerrarResultSet();
            sm = null;
        }
    }
    
    private void limpiarTabla(){
        jTDiasHoras.setModel(dtm);
        for(int i = 0; i < dtm.getRowCount(); i++){
            dtm.removeRow(i);
            i --;
        }
    }
    
    private void addLinea(){
        tableRegistroDiasHoras = new TableRegistroModificacionDiasHoras(null);
        jTDiasHoras.setModel(tableRegistroDiasHoras);
        configuraTablaNuevo();
        tableRegistroDiasHoras.anhadir();

        //dtm.addRow(new Object[]{"", "", "", "", "", "", "", ""});
    }
    
    
    public static void agregarDatosNuevoRegistro(String codigo, String diasTrabajados, String horasTrabajadas){
        
        String periodo = jTFPeriodoRRHH.getText();
        String horasExtras = "0";
        
        try{
            String sql = "SELECT cod_empleado, nombre || ' ' || apellido AS nombreEmpleado, (SELECT valor FROM parametros WHERE " +
                         "parametro = 'RRHH_DIAS_LABORALES') AS diasLaborales, " +
                         "(SELECT valor FROM parametros WHERE parametro = 'RRHH_DIAS_FISCAL') AS diasFiscal " +
                         "FROM empleado " +
                         "WHERE figura_planilla = 'S' AND activo = 'S' AND cod_empleado = " + codigo + ""; 
            System.out.println("SQL NUEVO REGISTRO: " + sql);
            ResultSet rs = DBManager.ejecutarDSL(sql);
            if(rs != null){
                while(rs.next()){
                        Object [] row = new Object[8];
                        row[0] = rs.getString("cod_empleado");
                        row[1] = rs.getString("nombreEmpleado");
                        row[2] = periodo;
                        row[3] = rs.getString("diasLaborales");
                        row[4] = diasTrabajados;
                        row[5] = rs.getString("diasFiscal");
                        row[6] = horasTrabajadas;
                        row[7] = horasExtras;
                        //tableRegistroDiasHoras.setValueAt(row, i, i);
                        dtm.addRow(row);                    
                }
                configuraTabla();
                jTDiasHoras.updateUI();
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }finally{
            DBManager.CerrarStatements();
        }
    }
    
    private void opcionesNuevoRegistro(){
        NuevoRegCargaAutDiasHoras nuevoReg = new NuevoRegCargaAutDiasHoras(new JFrame(), true);
        nuevoReg.pack();
        nuevoReg.setVisible(true);
    }
    
    private boolean existeRegistroPeriodo(int codEmpleado, int periodo){
        boolean result = true;
        try{
            String sql = "SELECT cod_empleado, periodo, estado FROM dia_hora WHERE cod_empleado = " + codEmpleado + " AND periodo = " + periodo + " "; 
            System.out.println("SQL EXISTE REGISTRO PERIODO: " + sql);
            ResultSet rs = DBManager.ejecutarDSL(sql);
            if(rs != null){
                if(rs.next()){
                    result = true;
                }else{
                    result = false;
                }
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }finally{
            DBManager.CerrarStatements();
        }
        return result;
    }
    
    private void setEstadoBotonesGrabado(){
        jBBuscar.setEnabled(true);
        jBCancelar.setEnabled(false);
        jBGuardar.setEnabled(false);
        jBModificar.setEnabled(false);
        jBNuevo.setEnabled(true);
        jBSalir.setEnabled(true);
    }
    
    private void setEstadoBotonesModificar(){
        jBBuscar.setEnabled(false);
        jBCancelar.setEnabled(true);
        jBGuardar.setEnabled(true);
        jBModificar.setEnabled(false);
        jBNuevo.setEnabled(false);
        jBSalir.setEnabled(false);
    }
    
    private void cargaRegistroEmpleado(String codEmpleado, String periodo){
        StatementManager sm = new StatementManager();
        String sql = "";
        try{
            if(codEmpleado.equals("0")){
                sql =    "SELECT dia.cod_empleado, emp.nombre || ' ' || emp.apellido as nombreEmpleado, dia.periodo, dia.dias_laborales, dia.dias_trabajados, " +
                         "(SELECT valor FROM parametros WHERE parametro = 'RRHH_DIAS_FISCAL') AS diasFiscal, dia.horas_trabajadas, dia.horas_extras " +
                         "FROM dia_hora dia " +
                         "INNER JOIN empleado emp " +
                         "ON dia.cod_empleado = emp.cod_empleado " +
                         "WHERE dia.periodo = " + periodo + " ORDER BY dia.cod_empleado";
            }else{
                
                sql =    "SELECT dia.cod_empleado, emp.nombre || ' ' || emp.apellido as nombreEmpleado, dia.periodo, dia.dias_laborales, dia.dias_trabajados, " +
                         "(SELECT valor FROM parametros WHERE parametro = 'RRHH_DIAS_FISCAL') AS diasFiscal, dia.horas_trabajadas, dia.horas_extras " +
                         "FROM dia_hora dia " +
                         "INNER JOIN empleado emp " +
                         "ON dia.cod_empleado = emp.cod_empleado " +
                         "WHERE dia.cod_empleado = " + codEmpleado + " AND dia.periodo = " + periodo + "";
            }
            
            System.out.println("SQL CARGA REGISTRO EMPLADO: " + sql);
            sm.TheSql = sql;
            sm.EjecutarSql();
            if(sm.TheResultSet != null){
                while(sm.TheResultSet.next()){
                    Object [] row = new Object[8];
                    row[0] = sm.TheResultSet.getString("cod_empleado");
                    row[1] = sm.TheResultSet.getString("nombreEmpleado");
                    row[2] = sm.TheResultSet.getString("periodo");
                    row[3] = sm.TheResultSet.getString("dias_laborales");
                    row[4] = sm.TheResultSet.getString("dias_trabajados");
                    row[5] = sm.TheResultSet.getString("diasFiscal");
                    row[6] = sm.TheResultSet.getString("horas_trabajadas");
                    row[7] = sm.TheResultSet.getString("horas_extras");
                    dtm.addRow(row);
                }
                configuraTabla();
                jTDiasHoras.updateUI();
            }
        }catch(Exception ex){
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }finally{}
    }
    
    private static void habilitarBotonModificar(){
        System.out.println("ROW COUNT: " + jTDiasHoras.getRowCount());
        if(jTDiasHoras.getRowCount() <= 0){
            jBModificar.setEnabled(false);
        }else{
            jBModificar.setEnabled(true);
        }
    }
    
    private void updateHorasTrabajadas(){
        for(int i = 0; i < jTDiasHoras.getRowCount(); i++){
            int diasTrabajados = Integer.valueOf(jTDiasHoras.getValueAt(i, 4).toString());
            int horas = diasTrabajados * 8;    
            jTDiasHoras.setValueAt(horas, i, 6);
            jTDiasHoras.updateUI();
        }
    }
            
}
