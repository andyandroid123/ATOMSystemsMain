/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModRegistros;

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import principal.FormMain;
import utiles.DBManager;
import utiles.Focus;
import utiles.InfoErrores;
import utiles.MaxLength;
import utiles.StatementManager;

/**
 *
 * @author Andres
 */
public class Barras extends javax.swing.JDialog {

    /**
     * Creates new form Barras
     */
    
    private long codArticulo = 0;
        
    public Barras(java.awt.Frame parent, boolean modal, boolean habNuevo, long codArticulo) {
        super(parent, modal);
        initComponents();
        
        this.codArticulo = codArticulo;
        jTFCodBarras.setDocument(new MaxLength(13, "UPPER", "ALFA"));
        cargaComboSigla();
        jTFCansi.setDocument(new MaxLength(3, "", "ENTERO"));
        
        limpiaGrilla();
        jTFCodArticulo.setText(String.valueOf(codArticulo));
        getDescripcion(codArticulo);
        getBarras();
        selectFocus();
        setEstado(true);
        jTFCodBarras.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTFCodArticulo = new javax.swing.JTextField();
        jTFDescripcionArticulo = new javax.swing.JTextField();
        jTFCodBarras = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jCSigla = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTFCansi = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jCBCodVigente = new javax.swing.JCheckBox();
        jBAceptar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTBarras = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jBCancelar = new javax.swing.JButton();
        jBGrabar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ATOMSystems|Main - Mantenimiento de Códigos de Barra");

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jTFCodArticulo.setEnabled(false);

        jTFDescripcionArticulo.setEnabled(false);

        jTFCodBarras.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFCodBarrasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFCodBarrasFocusLost(evt);
            }
        });
        jTFCodBarras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFCodBarrasKeyPressed(evt);
            }
        });

        jLabel1.setText("Cód. Barras");

        jCSigla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSiglaKeyPressed(evt);
            }
        });

        jLabel2.setText("Sigla");

        jTFCansi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFCansiFocusGained(evt);
            }
        });
        jTFCansi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFCansiKeyPressed(evt);
            }
        });

        jLabel3.setText("U/M");

        jCBCodVigente.setText("Código Vigente");
        jCBCodVigente.setEnabled(false);
        jCBCodVigente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCBCodVigenteKeyPressed(evt);
            }
        });

        jBAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/check24.png"))); // NOI18N
        jBAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTFCodArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFDescripcionArticulo))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFCodBarras, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCSigla, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jTFCansi, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCBCodVigente, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFCodArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFDescripcionArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTFCodBarras, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCSigla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTFCansi, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCBCodVigente)))
                .addContainerGap())
        );

        jTBarras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Barras", "Sigla", "U/M", "Fec.Reg.", "Usuario", "Nombre", "Vigente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTBarras);

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cancelar24.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/guardar24.png"))); // NOI18N
        jBGrabar.setText("Grabar");
        jBGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGrabarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBGrabar)
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBCancelar, jBGrabar});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBCancelar)
                    .addComponent(jBGrabar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBCancelar, jBGrabar});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(560, 417));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGrabarActionPerformed
        if(grabaBarras()){
            try{
                DBManager.conn.commit();
                JOptionPane.showMessageDialog(this, "Códigos de Barras Registrados!", "Msg.", JOptionPane.INFORMATION_MESSAGE);
                cerrarVentanaYActualizar();
            }catch(Exception ex){
                ex.printStackTrace();
                InfoErrores.errores(ex);
            }
        }else{
            JOptionPane.showMessageDialog(this, "ATENCION: Error al Grabar Códigos de Barras!", "Msg.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jBGrabarActionPerformed

    private void jTFCodBarrasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodBarrasFocusGained
        jTFCodBarras.selectAll();
    }//GEN-LAST:event_jTFCodBarrasFocusGained

    private void jTFCodBarrasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodBarrasFocusLost
        if(jTFCodBarras.getText().trim().length() > 0){
            jTFCodBarras.setText(utiles.Utiles.padLeft(13, "0", jTFCodBarras.getText()));
        }
    }//GEN-LAST:event_jTFCodBarrasFocusLost

    private void jTFCodBarrasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCodBarrasKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jCSigla.grabFocus();
        }
    }//GEN-LAST:event_jTFCodBarrasKeyPressed

    private void jCSiglaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSiglaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(jCSigla.getSelectedItem().toString().equals("UN") || jCSigla.getSelectedItem().toString().equals("KG")){
                jTFCansi.setText("1");
            }
            jTFCansi.grabFocus();
            jTFCansi.selectAll();
        }
    }//GEN-LAST:event_jCSiglaKeyPressed

    private void jTFCansiFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCansiFocusGained
        jTFCansi.selectAll();
    }//GEN-LAST:event_jTFCansiFocusGained

    private void jTFCansiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCansiKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jCBCodVigente.grabFocus();
            jCBCodVigente.setSelected(true);
        }
    }//GEN-LAST:event_jTFCansiKeyPressed

    private void jCBCodVigenteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCBCodVigenteKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jBAceptar.grabFocus();
        }
    }//GEN-LAST:event_jCBCodVigenteKeyPressed

    private void jBAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAceptarActionPerformed
        if ( ! existeCodBarras(jTFCodBarras.getText())) {
            if (existeSigla(jCSigla.getSelectedItem().toString())) {
                if ((utiles.Utiles.isNumeric(jTFCansi.getText())) & (Integer.valueOf(jTFCansi.getText()) > 0)) {
                    if (insertGrilla(jTFCodBarras.getText(), jCSigla.getSelectedItem().toString(), jTFCansi.getText(),
                            utiles.Utiles.getSysDateTimeString(),
                            String.valueOf(FormMain.codUsuario), FormMain.nombreUsuario,
                            jCBCodVigente.isSelected())) {
                        if (jCBCodVigente.isSelected()) {
                            setVigente(jTFCodBarras.getText());
                        }
                        setEstado(false);
                    } else {
                        JOptionPane.showMessageDialog(this, "ATENCION: Error Agregando DATOS en Grilla!", "Msg.", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "ATENCION: Unidad de Medida NO Válida!", "Msg.", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "ATENCION: SIGLA Inexistente!", "Msg.", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ATENCION: Código de BARRAS ya está REGISTRADO!", "Msg.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jBAceptarActionPerformed

    private void cerrarVentanaYActualizar(){
        if(Articulos.colLineas.isEmpty()){
            Articulos.colLineas.addElement("Barras");
            Articulos.colLineas.addElement("Sigla");
            Articulos.colLineas.addElement("Cantidad");
        }
        
        String sql = "SELECT cod_barras, sigla_venta, cansi_venta "
                   + "FROM barras WHERE cod_articulo = " + jTFCodArticulo.getText().trim() + "";
        
        Articulos.resultSetLineas = DBManager.ejecutarDSL(sql);
        Articulos.tGridBarras.setDataSet(Articulos.resultSetLineas, Articulos.colLineas);
        Articulos.tGridBarras.setVisible(true);
        Articulos.tGridBarras.repaint();
        
        this.dispose();
    }
    
    private boolean grabaBarras() {
        boolean result = true;
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTBarras.getModel();
            for (int i = 0; i < dtm.getRowCount(); i++) {
                String codBar = dtm.getValueAt(i, 0).toString();
                String sigla  = dtm.getValueAt(i, 1).toString();
                String cansi  = dtm.getValueAt(i, 2).toString();
                //String fecVig = dtm.getValueAt(i, 3).toString();
                String codUsr = dtm.getValueAt(i, 4).toString();
                //String vigente= ((Boolean) (dtm.getValueAt(i, 6)) ? "S" : "N");
                String vigente = "S";

                String sql = "";
                if (vigente.equals("S")) {
                    sql = "UPDATE barras SET "+
                        " vigente      = '"+ vigente +"',"+
                        " fec_vigencia = now(), "+
                        " cod_usuario  = "+FormMain.codUsuario +
                        " WHERE cod_barras ='"+codBar+"'";
                } else {
                    sql = "UPDATE barras SET "+
                        " vigente = '"+vigente+"'"+
                        " WHERE cod_barras ='"+codBar+"'";
                }
                if (DBManager.ejecutarDML(sql) == 0) {
                    sql = "INSERT INTO barras (cod_articulo, cod_barras, sigla_venta, cansi_venta, vigente, cod_usuario, fec_vigencia) "+
                            " VALUES ("+ codArticulo +",'"+ codBar +"','"+ sigla +"',"+ cansi +",'"+ vigente +"',"+ codUsr +", now())";
                    if (DBManager.ejecutarDML(sql) == 0) {
                        result = false;
                    }
                }
            }
        } catch (Exception ex) {
            result = false;
            ex.printStackTrace();
            InfoErrores.errores(ex);
        }
        return result;
    }
    
    private boolean existeSigla(String sigla) {
        boolean result = false;
        StatementManager sm = new StatementManager();
        try {
            sm.TheSql = "SELECT * "+
                    " FROM sigla " +
                    " WHERE sigla ='"+sigla+"'";
            sm.EjecutarSql();
            if (sm.TheResultSet.next()) {
                result = true;
            }
        } catch (Exception ex) {
            result = false;
            ex.printStackTrace();
            InfoErrores.errores(ex);
        } finally {
            sm.CerrarStatement();
            sm = null;
        }
        return result;
    }
    
    private boolean setVigente(String codBarras) {
        boolean result = true;
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTBarras.getModel();
            for (int i = 0; i < dtm.getRowCount(); i++) {
                if (dtm.getValueAt(i, 0).toString().equals(codBarras)) {
                    dtm.setValueAt(true, i, 6);
                } else {
                    dtm.setValueAt(false, i, 6);
                }
            }
            jTBarras.setModel(dtm);
            dtm = null;
        } catch (Exception ex) {
            ex.printStackTrace();
            InfoErrores.errores(ex);
            result = false;
        }
        return result;
    }
    
    private boolean existeCodBarras(String codBarras) {
        boolean result = false;
        StatementManager sm = new StatementManager();
        try {
            sm.TheSql = "SELECT b.cod_barras "+
                    " FROM barras b " +
                    " WHERE b.cod_barras ='"+codBarras+"'";
            sm.EjecutarSql();
            if (sm.TheResultSet.next()) {
                result = true;
            }
        } catch (Exception ex) {
            result = false;
            ex.printStackTrace();
            InfoErrores.errores(ex);
        } finally {
            sm.CerrarStatement();
            sm = null;
        }
        return result;
    }
    
    private void setEstado(boolean est) {
        jTFCodBarras.setEditable(est);
        jTFCansi.setEditable(est);
        jCBCodVigente.setEnabled(est);
        jBAceptar.setEnabled(est);
    }
    
    private void selectFocus(){
        jTFCodBarras.addFocusListener(new Focus());
        jCSigla.addFocusListener(new Focus());
        jTFCansi.addFocusListener(new Focus());
        jCBCodVigente.addFocusListener(new Focus());
        jBAceptar.addFocusListener(new Focus());
     }
    
    private boolean getBarras() {
        boolean result = true;
        StatementManager sm = new StatementManager();
        try {
            sm.TheSql = "SELECT b.cod_barras, b.sigla_venta, b.cansi_venta, "+
                    " TO_CHAR(b.fec_vigencia, 'dd/MM/yyyy hh:mi:ss') AS fec_vigencia, "+
                    " b.cod_usuario, usr.nombre, b.vigente "+
                    " FROM barras b "+
                    " INNER JOIN usuario usr ON b.cod_usuario = usr.cod_usuario "+
                    " WHERE b.cod_articulo = " + codArticulo +
                    " ORDER BY b.fec_vigencia";
            sm.EjecutarSql();
            while (sm.TheResultSet.next()) {
                insertGrilla(sm.TheResultSet.getString("cod_barras"),
                        sm.TheResultSet.getString("sigla_venta"),
                        sm.TheResultSet.getString("cansi_venta"),
                        sm.TheResultSet.getString("fec_vigencia"),
                        sm.TheResultSet.getString("cod_usuario"),
                        sm.TheResultSet.getString("nombre"),
                        new Boolean( sm.TheResultSet.getString("vigente").toString().equals("S")) );
            }
        } catch (Exception ex) {
            result = false;
            ex.printStackTrace();
            InfoErrores.errores(ex);
        } finally {
            sm.CerrarStatement();
            sm = null;
        }
        return result;                
    }
    
    private boolean insertGrilla(String codBarras, String sigla, String cansi, String fecVigencia, String codUsr, String nomUsr, boolean vigente) {
        boolean result = true;
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTBarras.getModel();
            String[] campos = new String[]{null, null, null, null, null, null, null};
            dtm.addRow(campos);
            int i = dtm.getRowCount()-1;
            dtm.setValueAt(codBarras,   i, 0);
            dtm.setValueAt(sigla,       i, 1);
            dtm.setValueAt(cansi,       i, 2);
            dtm.setValueAt(fecVigencia, i, 3);
            dtm.setValueAt(codUsr,      i, 4);
            dtm.setValueAt(nomUsr,      i, 5);
            dtm.setValueAt(vigente,     i, 6);
            
            jTBarras.setModel(dtm);
            dtm = null;
        } catch (Exception ex) {
            ex.printStackTrace();
            InfoErrores.errores(ex);
            result = false;
        }
        return result;
    }
    
    private boolean getDescripcion(long codArt) {
        boolean result = true;
        StatementManager sm = new StatementManager();
        try {
            sm.TheSql = "SELECT descripcion "+
                    " FROM articulo "+
                    " WHERE cod_articulo = " + codArt;
            sm.EjecutarSql();
            if (sm.TheResultSet.next()) {
                jTFDescripcionArticulo.setText(sm.TheResultSet.getString("descripcion"));
            } else {
                jTFDescripcionArticulo.setText("INEXISTENTE !!!");
            }
        } catch (Exception ex) {
            result = false;
            ex.printStackTrace();
            InfoErrores.errores(ex);
        } finally {
            sm.CerrarStatement();
            sm = null;
        }
        return result;
    }
    
    private void limpiaGrilla() {
        DefaultTableModel dtm = (DefaultTableModel) jTBarras.getModel();
        while (dtm.getRowCount() > 0) {
            dtm.removeRow(0);
        }
    }
    
    private void cargaComboSigla() {         
        StatementManager TheQuery = new StatementManager();
        TheQuery.TheSql = "select  sigla from sigla order by descripcion desc";
        TheQuery.EjecutarSql();
        try {
            while (TheQuery.TheResultSet.next()) {
                try {                    
                    jCSigla.addItem(TheQuery.TheResultSet.getString("sigla"));                   
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    InfoErrores.errores(ex);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            InfoErrores.errores(ex);
        } finally {
            DBManager.CerrarStatements();
        }
        TheQuery.CerrarStatement();
        TheQuery = null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Barras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Barras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Barras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Barras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Barras dialog = new Barras(new javax.swing.JFrame(), true, true, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAceptar;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBGrabar;
    private javax.swing.JCheckBox jCBCodVigente;
    private javax.swing.JComboBox<String> jCSigla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTBarras;
    private javax.swing.JTextField jTFCansi;
    private javax.swing.JTextField jTFCodArticulo;
    private javax.swing.JTextField jTFCodBarras;
    private javax.swing.JTextField jTFDescripcionArticulo;
    // End of variables declaration//GEN-END:variables
}
